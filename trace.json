[
    [
        1659399005198,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 116,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 20,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 96,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 3,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 569237,
                        "startOffset": 568946
                    },
                    {
                        "count": 2,
                        "endOffset": 569515,
                        "startOffset": 569286
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 2,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 2,
                        "endOffset": 569941,
                        "startOffset": 569886
                    },
                    {
                        "count": 0,
                        "endOffset": 570345,
                        "startOffset": 569941
                    },
                    {
                        "count": 2,
                        "endOffset": 570484,
                        "startOffset": 570345
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 2,
                        "endOffset": 570815,
                        "startOffset": 570564
                    },
                    {
                        "count": 1,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 2,
                        "endOffset": 571042,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 2,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 14,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 0,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 6,
                        "endOffset": 620885,
                        "startOffset": 620864
                    },
                    {
                        "count": 6,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621194,
                        "startOffset": 621080
                    },
                    {
                        "count": 0,
                        "endOffset": 621472,
                        "startOffset": 621206
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 0,
                        "endOffset": 622018,
                        "startOffset": 622013
                    },
                    {
                        "count": 0,
                        "endOffset": 622054,
                        "startOffset": 622019
                    },
                    {
                        "count": 0,
                        "endOffset": 622193,
                        "startOffset": 622089
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005198
            }
        ]
    ],
    [
        1659399005201,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005201
            }
        ]
    ],
    [
        1659399005236,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 12,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 116,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 20,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 96,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 2,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 2,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 2,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 5,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 5,
                        "endOffset": 568497,
                        "startOffset": 568465
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 568922,
                        "startOffset": 568896
                    },
                    {
                        "count": 0,
                        "endOffset": 569192,
                        "startOffset": 569157
                    },
                    {
                        "count": 4,
                        "endOffset": 569269,
                        "startOffset": 569245
                    },
                    {
                        "count": 2,
                        "endOffset": 569284,
                        "startOffset": 569269
                    },
                    {
                        "count": 2,
                        "endOffset": 569515,
                        "startOffset": 569286
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 2,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 2,
                        "endOffset": 570345,
                        "startOffset": 569886
                    },
                    {
                        "count": 0,
                        "endOffset": 570016,
                        "startOffset": 569992
                    },
                    {
                        "count": 0,
                        "endOffset": 570113,
                        "startOffset": 570107
                    },
                    {
                        "count": 0,
                        "endOffset": 570289,
                        "startOffset": 570267
                    },
                    {
                        "count": 0,
                        "endOffset": 570327,
                        "startOffset": 570291
                    },
                    {
                        "count": 0,
                        "endOffset": 570459,
                        "startOffset": 570345
                    },
                    {
                        "count": 2,
                        "endOffset": 570484,
                        "startOffset": 570459
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 2,
                        "endOffset": 570782,
                        "startOffset": 570564
                    },
                    {
                        "count": 1,
                        "endOffset": 570815,
                        "startOffset": 570782
                    },
                    {
                        "count": 1,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 2,
                        "endOffset": 571037,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 571037
                    },
                    {
                        "count": 2,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 2,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getParent(inst) {",
                    "      if (inst === null) {",
                    "        return null;",
                    "      }",
                    "",
                    "      do {",
                    "        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.",
                    "        // That is depending on if we want nested subtrees (layers) to bubble",
                    "        // events to their parent. We could also go through parentNode on the",
                    "        // host node but that wouldn't work for React Native and doesn't let us",
                    "        // do the portal feature.",
                    "      } while (inst && inst.tag !== HostComponent);",
                    "",
                    "      if (inst) {",
                    "        return inst;",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9404,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9422,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18998,
                "lineBundleEnd": 19016,
                "functionName": "getParent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 619258,
                        "startOffset": 618682
                    },
                    {
                        "count": 0,
                        "endOffset": 618764,
                        "startOffset": 618734
                    },
                    {
                        "count": 32,
                        "endOffset": 619140,
                        "startOffset": 618775
                    },
                    {
                        "count": 28,
                        "endOffset": 619182,
                        "startOffset": 619153
                    },
                    {
                        "count": 12,
                        "endOffset": 619232,
                        "startOffset": 619202
                    },
                    {
                        "count": 4,
                        "endOffset": 619257,
                        "startOffset": 619232
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getLowestCommonAncestor(instA, instB) {",
                    "      var nodeA = instA;",
                    "      var nodeB = instB;",
                    "      var depthA = 0;",
                    "",
                    "      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {",
                    "        depthA++;",
                    "      }",
                    "",
                    "      var depthB = 0;",
                    "",
                    "      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {",
                    "        depthB++;",
                    "      } // If A is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthA - depthB > 0) {",
                    "        nodeA = getParent(nodeA);",
                    "        depthA--;",
                    "      } // If B is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthB - depthA > 0) {",
                    "        nodeB = getParent(nodeB);",
                    "        depthB--;",
                    "      } // Walk in lockstep until we find a match.",
                    "",
                    "",
                    "      var depth = depthA;",
                    "",
                    "      while (depth--) {",
                    "        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {",
                    "          return nodeA;",
                    "        }",
                    "",
                    "        nodeA = getParent(nodeA);",
                    "        nodeB = getParent(nodeB);",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9429,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9469,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19023,
                "lineBundleEnd": 19063,
                "functionName": "getLowestCommonAncestor",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 620273,
                        "startOffset": 619381
                    },
                    {
                        "count": 6,
                        "endOffset": 619593,
                        "startOffset": 619566
                    },
                    {
                        "count": 8,
                        "endOffset": 619708,
                        "startOffset": 619681
                    },
                    {
                        "count": 0,
                        "endOffset": 619835,
                        "startOffset": 619774
                    },
                    {
                        "count": 0,
                        "endOffset": 620133,
                        "startOffset": 620087
                    },
                    {
                        "count": 0,
                        "endOffset": 620272,
                        "startOffset": 620170
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 6,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 4,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 2,
                        "endOffset": 620798,
                        "startOffset": 620580
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 2,
                        "endOffset": 620885,
                        "startOffset": 620828
                    },
                    {
                        "count": 2,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621194,
                        "startOffset": 621080
                    },
                    {
                        "count": 0,
                        "endOffset": 621472,
                        "startOffset": 621206
                    },
                    {
                        "count": 2,
                        "endOffset": 621527,
                        "startOffset": 621482
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 0,
                        "endOffset": 622061,
                        "startOffset": 622055
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005236
            }
        ]
    ],
    [
        1659399005267,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 12,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 116,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 20,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 96,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 2,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 4,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 4,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 2,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 2,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 4,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 2,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 5,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 5,
                        "endOffset": 568497,
                        "startOffset": 568465
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 568922,
                        "startOffset": 568896
                    },
                    {
                        "count": 0,
                        "endOffset": 569192,
                        "startOffset": 569157
                    },
                    {
                        "count": 4,
                        "endOffset": 569269,
                        "startOffset": 569245
                    },
                    {
                        "count": 2,
                        "endOffset": 569284,
                        "startOffset": 569269
                    },
                    {
                        "count": 2,
                        "endOffset": 569515,
                        "startOffset": 569286
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 2,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 2,
                        "endOffset": 570345,
                        "startOffset": 569886
                    },
                    {
                        "count": 0,
                        "endOffset": 570016,
                        "startOffset": 569992
                    },
                    {
                        "count": 0,
                        "endOffset": 570113,
                        "startOffset": 570107
                    },
                    {
                        "count": 0,
                        "endOffset": 570289,
                        "startOffset": 570267
                    },
                    {
                        "count": 0,
                        "endOffset": 570327,
                        "startOffset": 570291
                    },
                    {
                        "count": 0,
                        "endOffset": 570459,
                        "startOffset": 570345
                    },
                    {
                        "count": 2,
                        "endOffset": 570484,
                        "startOffset": 570459
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 2,
                        "endOffset": 570782,
                        "startOffset": 570564
                    },
                    {
                        "count": 1,
                        "endOffset": 570815,
                        "startOffset": 570782
                    },
                    {
                        "count": 1,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 2,
                        "endOffset": 571037,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 571037
                    },
                    {
                        "count": 2,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 2,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getParent(inst) {",
                    "      if (inst === null) {",
                    "        return null;",
                    "      }",
                    "",
                    "      do {",
                    "        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.",
                    "        // That is depending on if we want nested subtrees (layers) to bubble",
                    "        // events to their parent. We could also go through parentNode on the",
                    "        // host node but that wouldn't work for React Native and doesn't let us",
                    "        // do the portal feature.",
                    "      } while (inst && inst.tag !== HostComponent);",
                    "",
                    "      if (inst) {",
                    "        return inst;",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9404,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9422,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18998,
                "lineBundleEnd": 19016,
                "functionName": "getParent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 619258,
                        "startOffset": 618682
                    },
                    {
                        "count": 0,
                        "endOffset": 618764,
                        "startOffset": 618734
                    },
                    {
                        "count": 32,
                        "endOffset": 619140,
                        "startOffset": 618775
                    },
                    {
                        "count": 28,
                        "endOffset": 619182,
                        "startOffset": 619153
                    },
                    {
                        "count": 12,
                        "endOffset": 619232,
                        "startOffset": 619202
                    },
                    {
                        "count": 4,
                        "endOffset": 619257,
                        "startOffset": 619232
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getLowestCommonAncestor(instA, instB) {",
                    "      var nodeA = instA;",
                    "      var nodeB = instB;",
                    "      var depthA = 0;",
                    "",
                    "      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {",
                    "        depthA++;",
                    "      }",
                    "",
                    "      var depthB = 0;",
                    "",
                    "      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {",
                    "        depthB++;",
                    "      } // If A is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthA - depthB > 0) {",
                    "        nodeA = getParent(nodeA);",
                    "        depthA--;",
                    "      } // If B is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthB - depthA > 0) {",
                    "        nodeB = getParent(nodeB);",
                    "        depthB--;",
                    "      } // Walk in lockstep until we find a match.",
                    "",
                    "",
                    "      var depth = depthA;",
                    "",
                    "      while (depth--) {",
                    "        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {",
                    "          return nodeA;",
                    "        }",
                    "",
                    "        nodeA = getParent(nodeA);",
                    "        nodeB = getParent(nodeB);",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9429,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9469,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19023,
                "lineBundleEnd": 19063,
                "functionName": "getLowestCommonAncestor",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 620273,
                        "startOffset": 619381
                    },
                    {
                        "count": 8,
                        "endOffset": 619593,
                        "startOffset": 619566
                    },
                    {
                        "count": 4,
                        "endOffset": 619708,
                        "startOffset": 619681
                    },
                    {
                        "count": 4,
                        "endOffset": 619835,
                        "startOffset": 619774
                    },
                    {
                        "count": 0,
                        "endOffset": 619962,
                        "startOffset": 619901
                    },
                    {
                        "count": 0,
                        "endOffset": 620133,
                        "startOffset": 620087
                    },
                    {
                        "count": 0,
                        "endOffset": 620272,
                        "startOffset": 620170
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 10,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 4,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 6,
                        "endOffset": 620798,
                        "startOffset": 620580
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 6,
                        "endOffset": 620864,
                        "startOffset": 620828
                    },
                    {
                        "count": 4,
                        "endOffset": 620885,
                        "startOffset": 620864
                    },
                    {
                        "count": 4,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621206,
                        "startOffset": 620961
                    },
                    {
                        "count": 0,
                        "endOffset": 621460,
                        "startOffset": 621350
                    },
                    {
                        "count": 6,
                        "endOffset": 621527,
                        "startOffset": 621482
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 0,
                        "endOffset": 622061,
                        "startOffset": 622055
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005267
            }
        ]
    ],
    [
        1659399005300,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005300
            }
        ]
    ],
    [
        1659399005333,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005333
            }
        ]
    ],
    [
        1659399005367,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005367
            }
        ]
    ],
    [
        1659399005400,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005400
            }
        ]
    ],
    [
        1659399005433,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005433
            }
        ]
    ],
    [
        1659399005466,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005466
            }
        ]
    ],
    [
        1659399005500,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005500
            }
        ]
    ],
    [
        1659399005534,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005534
            }
        ]
    ],
    [
        1659399005567,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005567
            }
        ]
    ],
    [
        1659399005600,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005600
            }
        ]
    ],
    [
        1659399005634,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 12,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 116,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 20,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 96,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 2,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 2,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 2,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 5,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 5,
                        "endOffset": 568497,
                        "startOffset": 568465
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 568922,
                        "startOffset": 568896
                    },
                    {
                        "count": 0,
                        "endOffset": 569192,
                        "startOffset": 569157
                    },
                    {
                        "count": 4,
                        "endOffset": 569269,
                        "startOffset": 569245
                    },
                    {
                        "count": 2,
                        "endOffset": 569284,
                        "startOffset": 569269
                    },
                    {
                        "count": 2,
                        "endOffset": 569515,
                        "startOffset": 569286
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 2,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 2,
                        "endOffset": 570345,
                        "startOffset": 569886
                    },
                    {
                        "count": 0,
                        "endOffset": 570016,
                        "startOffset": 569992
                    },
                    {
                        "count": 0,
                        "endOffset": 570113,
                        "startOffset": 570107
                    },
                    {
                        "count": 0,
                        "endOffset": 570289,
                        "startOffset": 570267
                    },
                    {
                        "count": 0,
                        "endOffset": 570327,
                        "startOffset": 570291
                    },
                    {
                        "count": 0,
                        "endOffset": 570459,
                        "startOffset": 570345
                    },
                    {
                        "count": 2,
                        "endOffset": 570484,
                        "startOffset": 570459
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 2,
                        "endOffset": 570782,
                        "startOffset": 570564
                    },
                    {
                        "count": 1,
                        "endOffset": 570815,
                        "startOffset": 570782
                    },
                    {
                        "count": 1,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 2,
                        "endOffset": 571037,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 571037
                    },
                    {
                        "count": 2,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 2,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getParent(inst) {",
                    "      if (inst === null) {",
                    "        return null;",
                    "      }",
                    "",
                    "      do {",
                    "        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.",
                    "        // That is depending on if we want nested subtrees (layers) to bubble",
                    "        // events to their parent. We could also go through parentNode on the",
                    "        // host node but that wouldn't work for React Native and doesn't let us",
                    "        // do the portal feature.",
                    "      } while (inst && inst.tag !== HostComponent);",
                    "",
                    "      if (inst) {",
                    "        return inst;",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9404,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9422,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18998,
                "lineBundleEnd": 19016,
                "functionName": "getParent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 619258,
                        "startOffset": 618682
                    },
                    {
                        "count": 0,
                        "endOffset": 618764,
                        "startOffset": 618734
                    },
                    {
                        "count": 32,
                        "endOffset": 619140,
                        "startOffset": 618775
                    },
                    {
                        "count": 28,
                        "endOffset": 619182,
                        "startOffset": 619153
                    },
                    {
                        "count": 12,
                        "endOffset": 619232,
                        "startOffset": 619202
                    },
                    {
                        "count": 4,
                        "endOffset": 619257,
                        "startOffset": 619232
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getLowestCommonAncestor(instA, instB) {",
                    "      var nodeA = instA;",
                    "      var nodeB = instB;",
                    "      var depthA = 0;",
                    "",
                    "      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {",
                    "        depthA++;",
                    "      }",
                    "",
                    "      var depthB = 0;",
                    "",
                    "      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {",
                    "        depthB++;",
                    "      } // If A is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthA - depthB > 0) {",
                    "        nodeA = getParent(nodeA);",
                    "        depthA--;",
                    "      } // If B is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthB - depthA > 0) {",
                    "        nodeB = getParent(nodeB);",
                    "        depthB--;",
                    "      } // Walk in lockstep until we find a match.",
                    "",
                    "",
                    "      var depth = depthA;",
                    "",
                    "      while (depth--) {",
                    "        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {",
                    "          return nodeA;",
                    "        }",
                    "",
                    "        nodeA = getParent(nodeA);",
                    "        nodeB = getParent(nodeB);",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9429,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9469,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19023,
                "lineBundleEnd": 19063,
                "functionName": "getLowestCommonAncestor",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 620273,
                        "startOffset": 619381
                    },
                    {
                        "count": 4,
                        "endOffset": 619593,
                        "startOffset": 619566
                    },
                    {
                        "count": 8,
                        "endOffset": 619708,
                        "startOffset": 619681
                    },
                    {
                        "count": 0,
                        "endOffset": 619835,
                        "startOffset": 619774
                    },
                    {
                        "count": 4,
                        "endOffset": 619962,
                        "startOffset": 619901
                    },
                    {
                        "count": 0,
                        "endOffset": 620133,
                        "startOffset": 620087
                    },
                    {
                        "count": 0,
                        "endOffset": 620272,
                        "startOffset": 620170
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 10,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 4,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 6,
                        "endOffset": 620798,
                        "startOffset": 620580
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 6,
                        "endOffset": 620864,
                        "startOffset": 620828
                    },
                    {
                        "count": 4,
                        "endOffset": 620885,
                        "startOffset": 620864
                    },
                    {
                        "count": 4,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621194,
                        "startOffset": 621080
                    },
                    {
                        "count": 0,
                        "endOffset": 621472,
                        "startOffset": 621206
                    },
                    {
                        "count": 6,
                        "endOffset": 621527,
                        "startOffset": 621482
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 0,
                        "endOffset": 622061,
                        "startOffset": 622055
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005634
            }
        ]
    ],
    [
        1659399005666,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005666
            }
        ]
    ],
    [
        1659399005700,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005700
            }
        ]
    ],
    [
        1659399005737,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005737
            }
        ]
    ],
    [
        1659399005768,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005768
            }
        ]
    ],
    [
        1659399005800,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005800
            }
        ]
    ],
    [
        1659399005833,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005833
            }
        ]
    ],
    [
        1659399005841,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 1,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590505,
                        "startOffset": 590465
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 1,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005841
            }
        ]
    ],
    [
        1659399005844,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 588931,
                        "startOffset": 588905
                    },
                    {
                        "count": 0,
                        "endOffset": 588976,
                        "startOffset": 588932
                    },
                    {
                        "count": 0,
                        "endOffset": 589193,
                        "startOffset": 589003
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005844
            }
        ]
    ],
    [
        1659399005974,
        [
            {
                "type": "text",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399005974,
                "value": "",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399005976,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589193,
                        "startOffset": 589144
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 1,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 1,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 8,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 4,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 4,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 0,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function noop() {}"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9679,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19273,
                "lineBundleEnd": 19273,
                "functionName": "noop",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 628794,
                        "startOffset": 628776
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399005976
            }
        ]
    ],
    [
        1659399006767,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399006767,
                "value": "",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399006773,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 2,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 3,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 3,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 3,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 1,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 1,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 16,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 8,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 8,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006773
            }
        ]
    ],
    [
        1659399006774,
        [
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930665,
                        "startOffset": 930154
                    },
                    {
                        "count": 0,
                        "endOffset": 930772,
                        "startOffset": 930680
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 0,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 8,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 4,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 4,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 0,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006774
            }
        ]
    ],
    [
        1659399006880,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006880
            }
        ]
    ],
    [
        1659399006924,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399006924,
                "value": "s",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399006930,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 929003,
                        "startOffset": 928949
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399006930
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399006930
            }
        ]
    ],
    [
        1659399007012,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007012
            }
        ]
    ],
    [
        1659399007169,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399007169,
                "value": "sp",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399007174,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007174
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399007174
            }
        ]
    ],
    [
        1659399007268,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007268
            }
        ]
    ],
    [
        1659399007296,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399007296,
                "value": "spi",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399007302,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 929003,
                        "startOffset": 928949
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007302
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399007302
            }
        ]
    ],
    [
        1659399007388,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007388
            }
        ]
    ],
    [
        1659399007519,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399007519,
                "value": "spid",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399007527,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007527
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399007527
            }
        ]
    ],
    [
        1659399007608,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007608
            }
        ]
    ],
    [
        1659399007712,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399007712,
                "value": "spide",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399007718,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 929003,
                        "startOffset": 928949
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007718
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399007718
            }
        ]
    ],
    [
        1659399007808,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007808
            }
        ]
    ],
    [
        1659399007850,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399007850,
                "value": "spider",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399007855,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551287,
                        "startOffset": 551249
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551788
                    },
                    {
                        "count": 2,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 3,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 3,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 3,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 1,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 1,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 16,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 8,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 8,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007855
            }
        ]
    ],
    [
        1659399007856,
        [
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007856
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399007856
            }
        ]
    ],
    [
        1659399007858,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 0,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 8,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 4,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 4,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 0,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007858
            }
        ]
    ],
    [
        1659399007944,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399007944
            }
        ]
    ],
    [
        1659399008040,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008040,
                "value": "spider ",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399008046,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 929003,
                        "startOffset": 928949
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008046
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008046
            }
        ]
    ],
    [
        1659399008140,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008140
            }
        ]
    ],
    [
        1659399008170,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008170,
                "value": "spider m",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399008174,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 3,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 4,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 4,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 1,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 4,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 1,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 4,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 4,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 4,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 3,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 1,
                        "endOffset": 573249,
                        "startOffset": 573214
                    },
                    {
                        "count": 1,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 1,
                        "endOffset": 588254,
                        "startOffset": 588241
                    },
                    {
                        "count": 1,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 1,
                        "endOffset": 589627,
                        "startOffset": 589195
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 4,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 1,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 1,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    },
                    {
                        "count": 2,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 2,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 24,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 12,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 12,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008174
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008174
            }
        ]
    ],
    [
        1659399008276,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008276
            }
        ]
    ],
    [
        1659399008287,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008287,
                "value": "spider ma",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399008291,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "        setValue: function setValue(value) {",
                    "          {",
                    "            checkFormFieldValueStringCoercion(value);",
                    "          }",
                    "          currentValue = '' + value;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1659,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1664,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11253,
                "lineBundleEnd": 11258,
                "functionName": "setValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346040,
                        "startOffset": 345889
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346908,
                        "startOffset": 346882
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function restoreControlledState(element, props) {",
                    "      var node = element;",
                    "      updateWrapper(node, props);",
                    "      updateNamedCousins(node, props);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1912,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1916,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11506,
                "lineBundleEnd": 11510,
                "functionName": "restoreControlledState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 356206,
                        "startOffset": 356052
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function updateNamedCousins(rootNode, props) {",
                    "      var name = props.name;",
                    "",
                    "      if (props.type === 'radio' && name != null) {",
                    "        var queryRoot = rootNode;",
                    "",
                    "        while (queryRoot.parentNode) {",
                    "          queryRoot = queryRoot.parentNode;",
                    "        } // If `rootNode.form` was non-null, then we could try `form.elements`,",
                    "        // but that sometimes behaves strangely in IE8. We could also try using",
                    "        // `form.getElementsByName`, but that will only return direct children",
                    "        // and won't include inputs that use the HTML5 `form=` attribute. Since",
                    "        // the input might not even be in a form. It might not even be in the",
                    "        // document. Let's just use the local `querySelectorAll` to ensure we don't",
                    "        // miss anything.",
                    "",
                    "",
                    "        {",
                    "          checkAttributeStringCoercion(name, 'name');",
                    "        }",
                    "        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');",
                    "",
                    "        for (var i = 0; i < group.length; i++) {",
                    "          var otherNode = group[i];",
                    "",
                    "          if (otherNode === rootNode || otherNode.form !== rootNode.form) {",
                    "            continue;",
                    "          } // This will throw if radio buttons rendered by different copies of React",
                    "          // and the same name are rendered into the same form (same as #1939).",
                    "          // That's probably okay; we don't support it just as we don't support",
                    "          // mixing React radio buttons with non-React ones.",
                    "",
                    "",
                    "          var otherProps = getFiberCurrentPropsFromNode(otherNode);",
                    "",
                    "          if (!otherProps) {",
                    "            throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');",
                    "          } // We need update the tracked value on the named cousin since the value",
                    "          // was changed but the input saw no event or value set",
                    "",
                    "",
                    "          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that",
                    "          // was previously checked to update will cause it to be come re-checked",
                    "          // as appropriate.",
                    "",
                    "          updateWrapper(otherNode, otherProps);",
                    "        }",
                    "      }",
                    "    } // In Chrome, assigning defaultValue to certain input types triggers input validation."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1918,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1966,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11512,
                "lineBundleEnd": 11560,
                "functionName": "updateNamedCousins",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 358324,
                        "startOffset": 356212
                    },
                    {
                        "count": 0,
                        "endOffset": 356337,
                        "startOffset": 356322
                    },
                    {
                        "count": 0,
                        "endOffset": 358318,
                        "startOffset": 356339
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function restoreStateOfTarget(target) {",
                    "      // We perform this translation at the end of the event loop so that we",
                    "      // always receive the correct fiber here",
                    "      var internalInstance = getInstanceFromNode(target);",
                    "",
                    "      if (!internalInstance) {",
                    "        // Unmounted",
                    "        return;",
                    "      }",
                    "",
                    "      if (typeof restoreImpl !== 'function') {",
                    "        throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');",
                    "      }",
                    "",
                    "      var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.",
                    "",
                    "      if (stateNode) {",
                    "        var _props = getFiberCurrentPropsFromNode(stateNode);",
                    "",
                    "        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3837,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3858,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13431,
                "lineBundleEnd": 13452,
                "functionName": "restoreStateOfTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 426963,
                        "startOffset": 426147
                    },
                    {
                        "count": 0,
                        "endOffset": 426445,
                        "startOffset": 426399
                    },
                    {
                        "count": 0,
                        "endOffset": 426691,
                        "startOffset": 426492
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function enqueueStateRestore(target) {",
                    "      if (restoreTarget) {",
                    "        if (restoreQueue) {",
                    "          restoreQueue.push(target);",
                    "        } else {",
                    "          restoreQueue = [target];",
                    "        }",
                    "      } else {",
                    "        restoreTarget = target;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13458,
                "lineBundleEnd": 13468,
                "functionName": "enqueueStateRestore",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427301,
                        "startOffset": 427048
                    },
                    {
                        "count": 0,
                        "endOffset": 427248,
                        "startOffset": 427112
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function restoreStateIfNeeded() {",
                    "      if (!restoreTarget) {",
                    "        return;",
                    "      }",
                    "",
                    "      var target = restoreTarget;",
                    "      var queuedTargets = restoreQueue;",
                    "      restoreTarget = null;",
                    "      restoreQueue = null;",
                    "      restoreStateOfTarget(target);",
                    "",
                    "      if (queuedTargets) {",
                    "        for (var i = 0; i < queuedTargets.length; i++) {",
                    "          restoreStateOfTarget(queuedTargets[i]);",
                    "        }",
                    "      }",
                    "    } // the renderer. Such as when we're dispatching events or if third party"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3880,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3896,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13474,
                "lineBundleEnd": 13490,
                "functionName": "restoreStateIfNeeded",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 427821,
                        "startOffset": 427411
                    },
                    {
                        "count": 0,
                        "endOffset": 427496,
                        "startOffset": 427471
                    },
                    {
                        "count": 0,
                        "endOffset": 427815,
                        "startOffset": 427689
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527068,
                        "startOffset": 527050
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 1,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 0,
                        "endOffset": 551748,
                        "startOffset": 551729
                    },
                    {
                        "count": 0,
                        "endOffset": 551788,
                        "startOffset": 551750
                    },
                    {
                        "count": 2,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 3,
                        "endOffset": 555371,
                        "startOffset": 555341
                    },
                    {
                        "count": 1,
                        "endOffset": 555486,
                        "startOffset": 555371
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555486
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {",
                    "      // Flag this event loop as needing state restore.",
                    "      enqueueStateRestore(target);",
                    "      var listeners = accumulateTwoPhaseListeners(inst, 'onChange');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7784,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7796,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17378,
                "lineBundleEnd": 17390,
                "functionName": "createAndAccumulateChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559345,
                        "startOffset": 558868
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 3,
                        "endOffset": 565415,
                        "startOffset": 565387
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 1,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 3,
                        "endOffset": 567235,
                        "startOffset": 567206
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 3,
                        "endOffset": 567409,
                        "startOffset": 567307
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 1,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 1,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 16,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 8,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 8,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 1,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function restoreControlledState$3(domElement, tag, props) {",
                    "      switch (tag) {",
                    "        case 'input':",
                    "          restoreControlledState(domElement, props);",
                    "          return;",
                    "",
                    "        case 'textarea':",
                    "          restoreControlledState$2(domElement, props);",
                    "          return;",
                    "",
                    "        case 'select':",
                    "          restoreControlledState$1(domElement, props);",
                    "          return;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10538,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 10552,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20132,
                "lineBundleEnd": 20146,
                "functionName": "restoreControlledState$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 662466,
                        "startOffset": 662083
                    },
                    {
                        "count": 0,
                        "endOffset": 662355,
                        "startOffset": 662266
                    },
                    {
                        "count": 0,
                        "endOffset": 662452,
                        "startOffset": 662365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getInstanceFromNode(node) {",
                    "      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];",
                    "",
                    "      if (inst) {",
                    "        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {",
                    "          return inst;",
                    "        } else {",
                    "          return null;",
                    "        }",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11673,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11685,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21267,
                "lineBundleEnd": 21279,
                "functionName": "getInstanceFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 704241,
                        "startOffset": 703871
                    },
                    {
                        "count": 0,
                        "endOffset": 703988,
                        "startOffset": 703951
                    },
                    {
                        "count": 0,
                        "endOffset": 704072,
                        "startOffset": 704048
                    },
                    {
                        "count": 0,
                        "endOffset": 704106,
                        "startOffset": 704073
                    },
                    {
                        "count": 0,
                        "endOffset": 704131,
                        "startOffset": 704107
                    },
                    {
                        "count": 0,
                        "endOffset": 704207,
                        "startOffset": 704167
                    },
                    {
                        "count": 0,
                        "endOffset": 704240,
                        "startOffset": 704215
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 9,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 929003,
                        "startOffset": 928949
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "    function flushSync(fn) {",
                    "      // In legacy mode, we flush pending passive effects at the beginning of the",
                    "      // next event, not at the end of the previous one.",
                    "      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "        flushPassiveEffects();",
                    "      }",
                    "",
                    "      var prevExecutionContext = executionContext;",
                    "      executionContext |= BatchedContext;",
                    "      var prevTransition = ReactCurrentBatchConfig$3.transition;",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "",
                    "      try {",
                    "        ReactCurrentBatchConfig$3.transition = null;",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "",
                    "        if (fn) {",
                    "          return fn();",
                    "        } else {",
                    "          return undefined;",
                    "        }",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig$3.transition = prevTransition;",
                    "        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.",
                    "        // Note that this will happen even if batchedUpdates is higher up",
                    "        // the stack.",
                    "",
                    "        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "          flushSyncCallbacks();",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25992,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 26024,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35581,
                "lineBundleEnd": 35613,
                "functionName": "flushSync",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1275383,
                        "startOffset": 1274082
                    },
                    {
                        "count": 0,
                        "endOffset": 1274346,
                        "startOffset": 1274295
                    },
                    {
                        "count": 0,
                        "endOffset": 1274416,
                        "startOffset": 1274347
                    },
                    {
                        "count": 0,
                        "endOffset": 1274458,
                        "startOffset": 1274418
                    },
                    {
                        "count": 0,
                        "endOffset": 1274849,
                        "startOffset": 1274815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008291
            },
            {
                "coverage": [
                    "  const handleSearchInputChanges = (",
                    "    e: React.ChangeEvent<HTMLInputElement>",
                    "  ): void => {",
                    "    setSearchValue(e.target.value);",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 6,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 10,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 409,
                "lineBundleEnd": 411,
                "functionName": "handleSearchInputChanges",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18345,
                        "startOffset": 18267
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008291
            }
        ]
    ],
    [
        1659399008293,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557593,
                        "startOffset": 557563
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559610,
                        "startOffset": 559580
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565041,
                        "startOffset": 565004
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566372,
                        "startOffset": 566339
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 0,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588282,
                        "startOffset": 588255
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590306,
                        "startOffset": 590273
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591911
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 8,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 4,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 4,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 0,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008293
            }
        ]
    ],
    [
        1659399008340,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008340
            }
        ]
    ],
    [
        1659399008522,
        [
            {
                "type": "keydown",
                "coverage": [
                    "      <input",
                    "        className=\"searchInput\"",
                    "        value={searchValue}",
                    "        onChange={handleSearchInputChanges}",
                    "        type=\"text\"",
                    "        placeholder=\"Search for a movie...\"",
                    "      />"
                ],
                "startPosition": {
                    "line": 24,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 30,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 24,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008522,
                "value": "spider man",
                "tagName": "INPUT"
            },
            {
                "type": "submit",
                "coverage": [
                    "      <input className=\"searchButton\" type=\"submit\" value=\"🔎\" />"
                ],
                "startPosition": {
                    "line": 32,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "endPosition": {
                    "line": 32,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "lineNumber": 32,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008522,
                "value": "🔎",
                "tagName": "INPUT"
            }
        ]
    ],
    [
        1659399008530,
        [
            {
                "coverage": [
                    "    function getValueFromNode(node) {",
                    "      var value = '';",
                    "",
                    "      if (!node) {",
                    "        return value;",
                    "      }",
                    "",
                    "      if (isCheckable(node)) {",
                    "        value = node.checked ? 'true' : 'false';",
                    "      } else {",
                    "        value = node.value;",
                    "      }",
                    "",
                    "      return value;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1601,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1615,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11195,
                "lineBundleEnd": 11209,
                "functionName": "getValueFromNode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 344268,
                        "startOffset": 344004
                    },
                    {
                        "count": 0,
                        "endOffset": 344109,
                        "startOffset": 344078
                    },
                    {
                        "count": 0,
                        "endOffset": 344198,
                        "startOffset": 344140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "        getValue: function getValue() {",
                    "          return currentValue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1656,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1658,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11250,
                "lineBundleEnd": 11252,
                "functionName": "getValue",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 345869,
                        "startOffset": 345807
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function updateValueIfChanged(node) {",
                    "      if (!node) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely",
                    "      // that trying again will succeed",
                    "",
                    "      if (!tracker) {",
                    "        return true;",
                    "      }",
                    "",
                    "      var lastValue = tracker.getValue();",
                    "      var nextValue = getValueFromNode(node);",
                    "",
                    "      if (nextValue !== lastValue) {",
                    "        tracker.setValue(nextValue);",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1682,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 1703,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 11276,
                "lineBundleEnd": 11297,
                "functionName": "updateValueIfChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 346909,
                        "startOffset": 346418
                    },
                    {
                        "count": 0,
                        "endOffset": 346504,
                        "startOffset": 346473
                    },
                    {
                        "count": 0,
                        "endOffset": 346689,
                        "startOffset": 346659
                    },
                    {
                        "count": 0,
                        "endOffset": 346882,
                        "startOffset": 346815
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {",
                    "          // If document doesn't exist we know for sure we will crash in this method",
                    "          // when we call document.createEvent(). However this can cause confusing",
                    "          // errors: https://github.com/facebook/create-react-app/issues/3482",
                    "          // So we preemptively throw with a better message instead.",
                    "          if (typeof document === 'undefined' || document === null) {",
                    "            throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');",
                    "          }",
                    "",
                    "          var evt = document.createEvent('Event');",
                    "          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We",
                    "          // set this to true at the beginning, then set it to false right after",
                    "          // calling the function. If the function errors, `didError` will never be",
                    "          // set to false. This strategy works even if the browser is flaky and",
                    "          // fails to call our global error handler, because it doesn't rely on",
                    "          // the error event at all.",
                    "",
                    "          var didError = true; // Keeps track of the value of window.event so that we can reset it",
                    "          // during the callback to let user code access window.event in the",
                    "          // browsers that support it.",
                    "",
                    "          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event",
                    "          // dispatching: https://github.com/facebook/react/issues/13688",
                    "",
                    "          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');",
                    "",
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously",
                    "          // dispatch our fake event using `dispatchEvent`. Inside the handler, we",
                    "          // call the user-provided callback.",
                    "",
                    "",
                    "          var funcArgs = Array.prototype.slice.call(arguments, 3);",
                    "",
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value",
                    "          // that was thrown. It's possible that this error handler will fire more",
                    "          // than once; for example, if non-React code also calls `dispatchEvent`",
                    "          // and a handler for that event throws. We should be resilient to most of",
                    "          // those cases. Even if our error event handler fires more than once, the",
                    "          // last error event is always used. If the callback actually does error,",
                    "          // we know that the last error event is the correct one, because it's not",
                    "          // possible for anything else to have happened in between our callback",
                    "          // erroring and the code that follows the `dispatchEvent` call below. If",
                    "          // the callback doesn't error, but the error event was fired, we know to",
                    "          // ignore it because `didError` will be false, as described above.",
                    "",
                    "",
                    "          var error; // Use this to track whether the error event is ever called.",
                    "",
                    "          var didSetError = false;",
                    "          var isCrossOriginError = false;",
                    "",
                    "          function handleWindowError(event) {",
                    "            error = event.error;",
                    "            didSetError = true;",
                    "",
                    "            if (error === null && event.colno === 0 && event.lineno === 0) {",
                    "              isCrossOriginError = true;",
                    "            }",
                    "",
                    "            if (event.defaultPrevented) {",
                    "              // Some other error handler has prevented default.",
                    "              // Browsers silence the error report if this happens.",
                    "              // We'll remember this to later decide whether to log it or not.",
                    "              if (error != null && typeof error === 'object') {",
                    "                try {",
                    "                  error._suppressLogging = true;",
                    "                } catch (inner) {// Ignore.",
                    "                }",
                    "              }",
                    "            }",
                    "          } // Create a fake event type.",
                    "",
                    "",
                    "          var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers",
                    "",
                    "          window.addEventListener('error', handleWindowError);",
                    "          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function",
                    "          // errors, it will trigger our global error handler.",
                    "",
                    "          evt.initEvent(evtType, false, false);",
                    "          fakeNode.dispatchEvent(evt);",
                    "",
                    "          if (windowEventDescriptor) {",
                    "            Object.defineProperty(window, 'event', windowEventDescriptor);",
                    "          }",
                    "",
                    "          if (didCall && didError) {",
                    "            if (!didSetError) {",
                    "              // The callback errored, but the error event never fired.",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');",
                    "            } else if (isCrossOriginError) {",
                    "              // eslint-disable-next-line react-internal/prod-error-codes",
                    "              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');",
                    "            }",
                    "",
                    "            this.onError(error);",
                    "          } // Remove our event listeners",
                    "",
                    "",
                    "          window.removeEventListener('error', handleWindowError);",
                    "",
                    "          if (!didCall) {",
                    "            // Something went really wrong, and our event was not dispatched.",
                    "            // https://github.com/facebook/react/issues/16734",
                    "            // https://github.com/facebook/react/issues/16585",
                    "            // Fall back to the production implementation.",
                    "            restoreAfterDispatch();",
                    "            return invokeGuardedCallbackProd.apply(this, arguments);",
                    "          }",
                    "        };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4064,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4192,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13658,
                "lineBundleEnd": 13786,
                "functionName": "invokeGuardedCallbackDev",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 441542,
                        "startOffset": 434209
                    },
                    {
                        "count": 0,
                        "endOffset": 435195,
                        "startOffset": 434667
                    },
                    {
                        "count": 0,
                        "endOffset": 439368,
                        "startOffset": 439343
                    },
                    {
                        "count": 0,
                        "endOffset": 441029,
                        "startOffset": 439917
                    },
                    {
                        "count": 0,
                        "endOffset": 441532,
                        "startOffset": 441153
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "          function restoreAfterDispatch() {",
                    "            // We immediately remove the callback from event listeners so that",
                    "            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a",
                    "            // nested call would trigger the fake event handlers of any call higher",
                    "            // in the stack.",
                    "            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the",
                    "            // window.event assignment in both IE <= 10 as they throw an error",
                    "            // \"Member not found\" in strict mode, and in Firefox which does not",
                    "            // support window.event.",
                    "",
                    "            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {",
                    "              window.event = windowEvent;",
                    "            }",
                    "          } // Create an event handler for our fake event. We will synchronously"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4090,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4103,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13684,
                "lineBundleEnd": 13697,
                "functionName": "restoreAfterDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437012,
                        "startOffset": 436220
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "          function callCallback() {",
                    "            didCall = true;",
                    "            restoreAfterDispatch();",
                    "            func.apply(context, funcArgs);",
                    "            didError = false;",
                    "          } // Create a global error event handler. We use this to capture the value"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4110,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4115,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13704,
                "lineBundleEnd": 13709,
                "functionName": "callCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 437465,
                        "startOffset": 437291
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {",
                    "      hasError = false;",
                    "      caughtError = null;",
                    "      invokeGuardedCallbackImpl$1.apply(reporter, arguments);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4221,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4225,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13815,
                "lineBundleEnd": 13819,
                "functionName": "invokeGuardedCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 442719,
                        "startOffset": 442530
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {",
                    "      invokeGuardedCallback.apply(this, arguments);",
                    "",
                    "      if (hasError) {",
                    "        var error = clearCaughtError();",
                    "",
                    "        if (!hasRethrowError) {",
                    "          hasRethrowError = true;",
                    "          rethrowError = error;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4238,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4249,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13832,
                "lineBundleEnd": 13843,
                "functionName": "invokeGuardedCallbackAndCatchFirstError",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 443545,
                        "startOffset": 443218
                    },
                    {
                        "count": 0,
                        "endOffset": 443539,
                        "startOffset": 443381
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function onCommitUnmount(fiber) {",
                    "      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {",
                    "        try {",
                    "          injectedHook.onCommitFiberUnmount(rendererID, fiber);",
                    "        } catch (err) {",
                    "          {",
                    "            if (!hasLoggedError) {",
                    "              hasLoggedError = true;",
                    "              error('React instrumentation encountered an error: %s', err);",
                    "            }",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4864,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 4877,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 14458,
                "lineBundleEnd": 14471,
                "functionName": "onCommitUnmount",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 90,
                        "endOffset": 463448,
                        "startOffset": 463018
                    },
                    {
                        "count": 0,
                        "endOffset": 463133,
                        "startOffset": 463075
                    },
                    {
                        "count": 0,
                        "endOffset": 463442,
                        "startOffset": 463135
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getEventCharCode(nativeEvent) {",
                    "      var charCode;",
                    "      var keyCode = nativeEvent.keyCode;",
                    "",
                    "      if ('charCode' in nativeEvent) {",
                    "        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.",
                    "",
                    "        if (charCode === 0 && keyCode === 13) {",
                    "          charCode = 13;",
                    "        }",
                    "      } else {",
                    "        // IE8 does not implement `charCode`, but `keyCode` has the correct value.",
                    "        charCode = keyCode;",
                    "      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)",
                    "      // report Enter as charCode 10 when ctrl is pressed.",
                    "",
                    "",
                    "      if (charCode === 10) {",
                    "        charCode = 13;",
                    "      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.",
                    "      // Must not discard the (non-)printable Enter-key.",
                    "",
                    "",
                    "      if (charCode >= 32 || charCode === 13) {",
                    "        return charCode;",
                    "      }",
                    "",
                    "      return 0;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6816,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6844,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16410,
                "lineBundleEnd": 16438,
                "functionName": "getEventCharCode",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 527127,
                        "startOffset": 526220
                    },
                    {
                        "count": 0,
                        "endOffset": 526522,
                        "startOffset": 526505
                    },
                    {
                        "count": 0,
                        "endOffset": 526560,
                        "startOffset": 526524
                    },
                    {
                        "count": 0,
                        "endOffset": 526694,
                        "startOffset": 526568
                    },
                    {
                        "count": 0,
                        "endOffset": 526886,
                        "startOffset": 526854
                    },
                    {
                        "count": 0,
                        "endOffset": 527126,
                        "startOffset": 527104
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function functionThatReturnsFalse() {",
                    "      return false;",
                    "    } // This is intentionally a factory so that we have different returned constructors."
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6850,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6852,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16444,
                "lineBundleEnd": 16446,
                "functionName": "functionThatReturnsFalse",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 527263,
                        "startOffset": 527200
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 6,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 1,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 5,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "        preventDefault: function preventDefault() {",
                    "          this.defaultPrevented = true;",
                    "          var event = this.nativeEvent;",
                    "",
                    "          if (!event) {",
                    "            return;",
                    "          }",
                    "",
                    "          if (event.preventDefault) {",
                    "            event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE",
                    "          } else if (typeof event.returnValue !== 'unknown') {",
                    "            event.returnValue = false;",
                    "          }",
                    "",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6905,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6920,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16499,
                "lineBundleEnd": 16514,
                "functionName": "preventDefault",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 529872,
                        "startOffset": 529394
                    },
                    {
                        "count": 0,
                        "endOffset": 529558,
                        "startOffset": 529525
                    },
                    {
                        "count": 0,
                        "endOffset": 529800,
                        "startOffset": 529698
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 1,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 551287
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    },
                    {
                        "count": 4,
                        "endOffset": 551909,
                        "startOffset": 551823
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 4,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 1,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 1,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 4,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getInstIfValueChanged(targetInst) {",
                    "      var targetNode = getNodeFromInstance(targetInst);",
                    "",
                    "      if (updateValueIfChanged(targetNode)) {",
                    "        return targetInst;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7834,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7840,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17428,
                "lineBundleEnd": 17434,
                "functionName": "getInstIfValueChanged",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 561029,
                        "startOffset": 560841
                    },
                    {
                        "count": 0,
                        "endOffset": 561023,
                        "startOffset": 560987
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 1,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 3,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 1,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 3,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 2,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 3,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 2,
                        "endOffset": 573257,
                        "startOffset": 573075
                    },
                    {
                        "count": 0,
                        "endOffset": 573249,
                        "startOffset": 573214
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589627,
                        "startOffset": 589195
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 5,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 1,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 1,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function executeDispatch(event, listener, currentTarget) {",
                    "      var type = event.type || 'unknown-event';",
                    "      event.currentTarget = currentTarget;",
                    "      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);",
                    "      event.currentTarget = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9065,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9070,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18659,
                "lineBundleEnd": 18664,
                "functionName": "executeDispatch",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 605046,
                        "startOffset": 604776
                    },
                    {
                        "count": 0,
                        "endOffset": 604881,
                        "startOffset": 604863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {",
                    "      var previousInstance;",
                    "",
                    "      if (inCapturePhase) {",
                    "        for (var i = dispatchListeners.length - 1; i >= 0; i--) {",
                    "          var _dispatchListeners$i = dispatchListeners[i],",
                    "              instance = _dispatchListeners$i.instance,",
                    "              currentTarget = _dispatchListeners$i.currentTarget,",
                    "              listener = _dispatchListeners$i.listener;",
                    "",
                    "          if (instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, listener, currentTarget);",
                    "          previousInstance = instance;",
                    "        }",
                    "      } else {",
                    "        for (var _i = 0; _i < dispatchListeners.length; _i++) {",
                    "          var _dispatchListeners$_i = dispatchListeners[_i],",
                    "              _instance = _dispatchListeners$_i.instance,",
                    "              _currentTarget = _dispatchListeners$_i.currentTarget,",
                    "              _listener = _dispatchListeners$_i.listener;",
                    "",
                    "          if (_instance !== previousInstance && event.isPropagationStopped()) {",
                    "            return;",
                    "          }",
                    "",
                    "          executeDispatch(event, _listener, _currentTarget);",
                    "          previousInstance = _instance;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9072,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9104,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18666,
                "lineBundleEnd": 18698,
                "functionName": "processDispatchQueueItemsInOrder",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 606281,
                        "startOffset": 605052
                    },
                    {
                        "count": 0,
                        "endOffset": 605726,
                        "startOffset": 605193
                    },
                    {
                        "count": 0,
                        "endOffset": 606155,
                        "startOffset": 606122
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function createDispatchListener(instance, listener, currentTarget) {",
                    "      return {",
                    "        instance: instance,",
                    "        listener: listener,",
                    "        currentTarget: currentTarget",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9320,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9326,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18914,
                "lineBundleEnd": 18920,
                "functionName": "createDispatchListener",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 615875,
                        "startOffset": 615684
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function noop() {}"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9679,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19273,
                "lineBundleEnd": 19273,
                "functionName": "noop",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 628794,
                        "startOffset": 628776
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function removeChild(parentInstance, child) {",
                    "      parentInstance.removeChild(child);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11130,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11132,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 20724,
                "lineBundleEnd": 20726,
                "functionName": "removeChild",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 683807,
                        "startOffset": 683715
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function detachDeletedInstance(node) {",
                    "      // TODO: This function is only called on host components. I don't think all of",
                    "      // these fields are relevant.",
                    "      delete node[internalInstanceKey];",
                    "      delete node[internalPropsKey];",
                    "      delete node[internalEventHandlersKey];",
                    "      delete node[internalEventHandlerListenersKey];",
                    "      delete node[internalEventHandlesSetKey];",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11556,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11564,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21150,
                "lineBundleEnd": 21158,
                "functionName": "detachDeletedInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 100,
                        "endOffset": 698760,
                        "startOffset": 698373
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 11,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function scheduleSyncCallback(callback) {",
                    "      // Push this callback into an internal queue. We'll flush these either in",
                    "      // the next tick, or earlier if something calls `flushSyncCallbackQueue`.",
                    "      if (syncQueue === null) {",
                    "        syncQueue = [callback];",
                    "      } else {",
                    "        // Push onto existing queue. Don't need to schedule a callback because",
                    "        // we already scheduled one when we created the queue.",
                    "        syncQueue.push(callback);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12058,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 12068,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21652,
                "lineBundleEnd": 21662,
                "functionName": "scheduleSyncCallback",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 718601,
                        "startOffset": 718131
                    },
                    {
                        "count": 0,
                        "endOffset": 718595,
                        "startOffset": 718404
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "      function deleteChild(returnFiber, childToDelete) {",
                    "        if (!shouldTrackSideEffects) {",
                    "          // Noop.",
                    "          return;",
                    "        }",
                    "",
                    "        var deletions = returnFiber.deletions;",
                    "",
                    "        if (deletions === null) {",
                    "          returnFiber.deletions = [childToDelete];",
                    "          returnFiber.flags |= ChildDeletion;",
                    "        } else {",
                    "          deletions.push(childToDelete);",
                    "        }",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 14940,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 14954,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 24534,
                "lineBundleEnd": 24548,
                "functionName": "deleteChild",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 835531,
                        "startOffset": 835139
                    },
                    {
                        "count": 0,
                        "endOffset": 835275,
                        "startOffset": 835227
                    },
                    {
                        "count": 1,
                        "endOffset": 835465,
                        "startOffset": 835357
                    },
                    {
                        "count": 9,
                        "endOffset": 835523,
                        "startOffset": 835465
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function basicStateReducer(state, action) {",
                    "      // $FlowFixMe: Flow doesn't like mixed types",
                    "      return typeof action === 'function' ? action(state) : action;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16543,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 16546,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 26137,
                "lineBundleEnd": 26140,
                "functionName": "basicStateReducer",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 896536,
                        "startOffset": 896368
                    },
                    {
                        "count": 0,
                        "endOffset": 896520,
                        "startOffset": 896505
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function dispatchSetState(fiber, queue, action) {",
                    "      {",
                    "        if (typeof arguments[3] === 'function') {",
                    "          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');",
                    "        }",
                    "      }",
                    "      var lane = requestUpdateLane(fiber);",
                    "      var update = {",
                    "        lane: lane,",
                    "        action: action,",
                    "        hasEagerState: false,",
                    "        eagerState: null,",
                    "        next: null",
                    "      };",
                    "",
                    "      if (isRenderPhaseUpdate(fiber)) {",
                    "        enqueueRenderPhaseUpdate(queue, update);",
                    "      } else {",
                    "        var alternate = fiber.alternate;",
                    "",
                    "        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {",
                    "          // The queue is currently empty, which means we can eagerly compute the",
                    "          // next state before entering the render phase. If the new state is the",
                    "          // same as the current state, we may be able to bail out entirely.",
                    "          var lastRenderedReducer = queue.lastRenderedReducer;",
                    "",
                    "          if (lastRenderedReducer !== null) {",
                    "            var prevDispatcher;",
                    "            {",
                    "              prevDispatcher = ReactCurrentDispatcher$1.current;",
                    "              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;",
                    "            }",
                    "",
                    "            try {",
                    "              var currentState = queue.lastRenderedState;",
                    "              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute",
                    "              // it, on the update object. If the reducer hasn't changed by the",
                    "              // time we enter the render phase, then the eager state can be used",
                    "              // without calling the reducer again.",
                    "",
                    "              update.hasEagerState = true;",
                    "              update.eagerState = eagerState;",
                    "",
                    "              if (objectIs(eagerState, currentState)) {",
                    "                // Fast path. We can bail out without scheduling React to re-render.",
                    "                // It's still possible that we'll need to rebase this update later,",
                    "                // if the component re-renders for a different reason and by that",
                    "                // time the reducer has changed.",
                    "                // TODO: Do we still need to entangle transitions in this case?",
                    "                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);",
                    "                return;",
                    "              }",
                    "            } catch (error) {// Suppress the error. It will throw again in the render phase.",
                    "            } finally {",
                    "              {",
                    "                ReactCurrentDispatcher$1.current = prevDispatcher;",
                    "              }",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);",
                    "",
                    "        if (root !== null) {",
                    "          var eventTime = requestEventTime();",
                    "          scheduleUpdateOnFiber(root, fiber, lane, eventTime);",
                    "          entangleTransitionUpdate(root, queue, lane);",
                    "        }",
                    "      }",
                    "",
                    "      markUpdateInDevTools(fiber, lane);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17448,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 17519,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 27042,
                "lineBundleEnd": 27113,
                "functionName": "dispatchSetState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 931254,
                        "startOffset": 928224
                    },
                    {
                        "count": 0,
                        "endOffset": 928565,
                        "startOffset": 928330
                    },
                    {
                        "count": 0,
                        "endOffset": 928863,
                        "startOffset": 928805
                    },
                    {
                        "count": 0,
                        "endOffset": 930917,
                        "startOffset": 929005
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function syncNestedUpdateFlag() {",
                    "      {",
                    "        currentUpdateIsNested = nestedUpdateScheduled;",
                    "        nestedUpdateScheduled = false;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18455,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 18460,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 28049,
                "lineBundleEnd": 28054,
                "functionName": "syncNestedUpdateFlag",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 968309,
                        "startOffset": 968160
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function safelyDetachRef(current, nearestMountedAncestor) {",
                    "      var ref = current.ref;",
                    "",
                    "      if (ref !== null) {",
                    "        if (typeof ref === 'function') {",
                    "          var retVal;",
                    "",
                    "          try {",
                    "            if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {",
                    "              try {",
                    "                startLayoutEffectTimer();",
                    "                retVal = ref(null);",
                    "              } finally {",
                    "                recordLayoutEffectDuration(current);",
                    "              }",
                    "            } else {",
                    "              retVal = ref(null);",
                    "            }",
                    "          } catch (error) {",
                    "            captureCommitPhaseError(current, nearestMountedAncestor, error);",
                    "          }",
                    "",
                    "          {",
                    "            if (typeof retVal === 'function') {",
                    "              error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));",
                    "            }",
                    "          }",
                    "        } else {",
                    "          ref.current = null;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 22747,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 22778,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 32336,
                "lineBundleEnd": 32367,
                "functionName": "safelyDetachRef",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 50,
                        "endOffset": 1151955,
                        "startOffset": 1150964
                    },
                    {
                        "count": 0,
                        "endOffset": 1151949,
                        "startOffset": 1151078
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function detachFiberMutation(fiber) {",
                    "      // Cut off the return pointer to disconnect it from the tree.",
                    "      // This enables us to detect and warn against state updates on an unmounted component.",
                    "      // It also prevents events from bubbling from within disconnected components.",
                    "      //",
                    "      // Ideally, we should also clear the child pointer of the parent alternate to let this",
                    "      // get GC:ed but we don't know which for sure which parent is the current",
                    "      // one so we'll settle for GC:ing the subtree of this child.",
                    "      // This child itself will be GC:ed when the parent updates the next time.",
                    "      //",
                    "      // Note that we can't clear child or sibling pointers yet.",
                    "      // They're needed for passive effects and for findDOMNode.",
                    "      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).",
                    "      //",
                    "      // Don't reset the alternate yet, either. We need that so we can detach the",
                    "      // alternate's fields in the passive phase. Clearing the return pointer is",
                    "      // sufficient for findDOMNode semantics.",
                    "      var alternate = fiber.alternate;",
                    "",
                    "      if (alternate !== null) {",
                    "        alternate.return = null;",
                    "      }",
                    "",
                    "      fiber.return = null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23501,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23525,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 33090,
                "lineBundleEnd": 33114,
                "functionName": "detachFiberMutation",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 1181406,
                        "startOffset": 1180183
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function detachFiberAfterEffects(fiber) {",
                    "      var alternate = fiber.alternate;",
                    "",
                    "      if (alternate !== null) {",
                    "        fiber.alternate = null;",
                    "        detachFiberAfterEffects(alternate);",
                    "      } // Note: Defensively using negation instead of < in case",
                    "      // `deletedTreeCleanUpLevel` is undefined.",
                    "",
                    "",
                    "      {",
                    "        // Clear cyclical Fiber fields. This level alone is designed to roughly",
                    "        // approximate the planned Fiber refactor. In that world, `setState` will be",
                    "        // bound to a special \"instance\" object instead of a Fiber. The Instance",
                    "        // object will not have any of these fields. It will only be connected to",
                    "        // the fiber tree via a single link at the root. So if this level alone is",
                    "        // sufficient to fix memory issues, that bodes well for our plans.",
                    "        fiber.child = null;",
                    "        fiber.deletions = null;",
                    "        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host",
                    "        // tree, which has its own pointers to children, parents, and siblings.",
                    "        // The other host nodes also point back to fibers, so we should detach that",
                    "        // one, too.",
                    "",
                    "        if (fiber.tag === HostComponent) {",
                    "          var hostInstance = fiber.stateNode;",
                    "",
                    "          if (hostInstance !== null) {",
                    "            detachDeletedInstance(hostInstance);",
                    "          }",
                    "        }",
                    "",
                    "        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We",
                    "        // already disconnect the `return` pointer at the root of the deleted",
                    "        // subtree (in `detachFiberMutation`). Besides, `return` by itself is not",
                    "        // cyclical — it's only cyclical when combined with `child`, `sibling`, and",
                    "        // `alternate`. But we'll clear it in the next level anyway, just in case.",
                    "",
                    "        {",
                    "          fiber._debugOwner = null;",
                    "        }",
                    "        {",
                    "          // Theoretically, nothing in here should be necessary, because we already",
                    "          // disconnected the fiber from the tree. So even if something leaks this",
                    "          // particular fiber, it won't leak anything else",
                    "          //",
                    "          // The purpose of this branch is to be super aggressive so we can measure",
                    "          // if there's any difference in memory impact. If there is, that could",
                    "          // indicate a React leak we don't know about.",
                    "          fiber.return = null;",
                    "          fiber.dependencies = null;",
                    "          fiber.memoizedProps = null;",
                    "          fiber.memoizedState = null;",
                    "          fiber.pendingProps = null;",
                    "          fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.",
                    "",
                    "          fiber.updateQueue = null;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23527,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23586,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 33116,
                "lineBundleEnd": 33175,
                "functionName": "detachFiberAfterEffects",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 270,
                        "endOffset": 1184069,
                        "startOffset": 1181412
                    },
                    {
                        "count": 180,
                        "endOffset": 1181609,
                        "startOffset": 1181524
                    },
                    {
                        "count": 150,
                        "endOffset": 1182762,
                        "startOffset": 1182604
                    },
                    {
                        "count": 100,
                        "endOffset": 1182752,
                        "startOffset": 1182690
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function commitDeletionEffects(root, returnFiber, deletedFiber) {",
                    "      {",
                    "        // We only have the top Fiber that was deleted but we need to recurse down its",
                    "        // children to find all the terminal nodes.",
                    "        // Recursively delete all host nodes from the parent, detach refs, clean",
                    "        // up mounted layout effects, and call componentWillUnmount.",
                    "        // We only need to remove the topmost host child in each branch. But then we",
                    "        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We",
                    "        // could split this into two separate traversals functions, where the second",
                    "        // one doesn't include any removeChild logic. This is maybe the same",
                    "        // function as \"disappearLayoutEffects\" (or whatever that turns into after",
                    "        // the layout phase is refactored to use recursion).",
                    "        // Before starting, find the nearest host parent on the stack so we know",
                    "        // which instance/container to remove the children from.",
                    "        // TODO: Instead of searching up the fiber return path on every deletion, we",
                    "        // can track the nearest host component on the JS stack as we traverse the",
                    "        // tree during the commit phase. This would make insertions faster, too.",
                    "        var parent = returnFiber;",
                    "",
                    "        findParent: while (parent !== null) {",
                    "          switch (parent.tag) {",
                    "            case HostComponent:",
                    "              {",
                    "                hostParent = parent.stateNode;",
                    "                hostParentIsContainer = false;",
                    "                break findParent;",
                    "              }",
                    "",
                    "            case HostRoot:",
                    "              {",
                    "                hostParent = parent.stateNode.containerInfo;",
                    "                hostParentIsContainer = true;",
                    "                break findParent;",
                    "              }",
                    "",
                    "            case HostPortal:",
                    "              {",
                    "                hostParent = parent.stateNode.containerInfo;",
                    "                hostParentIsContainer = true;",
                    "                break findParent;",
                    "              }",
                    "          }",
                    "",
                    "          parent = parent.return;",
                    "        }",
                    "",
                    "        if (hostParent === null) {",
                    "          throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');",
                    "        }",
                    "",
                    "        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);",
                    "        hostParent = null;",
                    "        hostParentIsContainer = false;",
                    "      }",
                    "      detachFiberMutation(deletedFiber);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23754,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 33343,
                "lineBundleEnd": 33398,
                "functionName": "commitDeletionEffects",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 1191864,
                        "startOffset": 1189490
                    },
                    {
                        "count": 0,
                        "endOffset": 1191229,
                        "startOffset": 1191042
                    },
                    {
                        "count": 0,
                        "endOffset": 1191432,
                        "startOffset": 1191243
                    },
                    {
                        "count": 0,
                        "endOffset": 1191489,
                        "startOffset": 1191444
                    },
                    {
                        "count": 0,
                        "endOffset": 1191671,
                        "startOffset": 1191524
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {",
                    "      // TODO: Use a static flag to skip trees that don't have unmount effects",
                    "      var child = parent.child;",
                    "",
                    "      while (child !== null) {",
                    "        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);",
                    "        child = child.sibling;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23811,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23819,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 33400,
                "lineBundleEnd": 33408,
                "functionName": "recursivelyTraverseDeletionEffects",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 90,
                        "endOffset": 1192232,
                        "startOffset": 1191870
                    },
                    {
                        "count": 80,
                        "endOffset": 1192226,
                        "startOffset": 1192103
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {",
                    "      onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse",
                    "      // into their subtree. There are simpler cases in the inner switch",
                    "      // that don't modify the stack.",
                    "",
                    "      switch (deletedFiber.tag) {",
                    "        case HostComponent:",
                    "          {",
                    "            if (!offscreenSubtreeWasHidden) {",
                    "              safelyDetachRef(deletedFiber, nearestMountedAncestor);",
                    "            } // Intentional fallthrough to next branch",
                    "",
                    "          }",
                    "        // eslint-disable-next-line-no-fallthrough",
                    "",
                    "        case HostText:",
                    "          {",
                    "            // We only need to remove the nearest host child. Set the host parent",
                    "            // to `null` on the stack to indicate that nested children don't",
                    "            // need to be removed.",
                    "            {",
                    "              var prevHostParent = hostParent;",
                    "              var prevHostParentIsContainer = hostParentIsContainer;",
                    "              hostParent = null;",
                    "              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "              hostParent = prevHostParent;",
                    "              hostParentIsContainer = prevHostParentIsContainer;",
                    "",
                    "              if (hostParent !== null) {",
                    "                // Now that all the child effects have unmounted, we can remove the",
                    "                // node from the tree.",
                    "                if (hostParentIsContainer) {",
                    "                  removeChildFromContainer(hostParent, deletedFiber.stateNode);",
                    "                } else {",
                    "                  removeChild(hostParent, deletedFiber.stateNode);",
                    "                }",
                    "              }",
                    "            }",
                    "            return;",
                    "          }",
                    "",
                    "        case DehydratedFragment:",
                    "          {",
                    "            // Delete the dehydrated suspense boundary and all of its content.",
                    "            {",
                    "              if (hostParent !== null) {",
                    "                if (hostParentIsContainer) {",
                    "                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);",
                    "                } else {",
                    "                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);",
                    "                }",
                    "              }",
                    "            }",
                    "            return;",
                    "          }",
                    "",
                    "        case HostPortal:",
                    "          {",
                    "            {",
                    "              // When we go into a portal, it becomes the parent to remove from.",
                    "              var _prevHostParent = hostParent;",
                    "              var _prevHostParentIsContainer = hostParentIsContainer;",
                    "              hostParent = deletedFiber.stateNode.containerInfo;",
                    "              hostParentIsContainer = true;",
                    "              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "              hostParent = _prevHostParent;",
                    "              hostParentIsContainer = _prevHostParentIsContainer;",
                    "            }",
                    "            return;",
                    "          }",
                    "",
                    "        case FunctionComponent:",
                    "        case ForwardRef:",
                    "        case MemoComponent:",
                    "        case SimpleMemoComponent:",
                    "          {",
                    "            if (!offscreenSubtreeWasHidden) {",
                    "              var updateQueue = deletedFiber.updateQueue;",
                    "",
                    "              if (updateQueue !== null) {",
                    "                var lastEffect = updateQueue.lastEffect;",
                    "",
                    "                if (lastEffect !== null) {",
                    "                  var firstEffect = lastEffect.next;",
                    "                  var effect = firstEffect;",
                    "",
                    "                  do {",
                    "                    var _effect = effect,",
                    "                        destroy = _effect.destroy,",
                    "                        tag = _effect.tag;",
                    "",
                    "                    if (destroy !== undefined) {",
                    "                      if ((tag & Insertion) !== NoFlags$1) {",
                    "                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);",
                    "                      } else if ((tag & Layout) !== NoFlags$1) {",
                    "                        {",
                    "                          markComponentLayoutEffectUnmountStarted(deletedFiber);",
                    "                        }",
                    "",
                    "                        if (deletedFiber.mode & ProfileMode) {",
                    "                          startLayoutEffectTimer();",
                    "                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);",
                    "                          recordLayoutEffectDuration(deletedFiber);",
                    "                        } else {",
                    "                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);",
                    "                        }",
                    "",
                    "                        {",
                    "                          markComponentLayoutEffectUnmountStopped();",
                    "                        }",
                    "                      }",
                    "                    }",
                    "",
                    "                    effect = effect.next;",
                    "                  } while (effect !== firstEffect);",
                    "                }",
                    "              }",
                    "            }",
                    "",
                    "            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "            return;",
                    "          }",
                    "",
                    "        case ClassComponent:",
                    "          {",
                    "            if (!offscreenSubtreeWasHidden) {",
                    "              safelyDetachRef(deletedFiber, nearestMountedAncestor);",
                    "              var instance = deletedFiber.stateNode;",
                    "",
                    "              if (typeof instance.componentWillUnmount === 'function') {",
                    "                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);",
                    "              }",
                    "            }",
                    "",
                    "            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "            return;",
                    "          }",
                    "",
                    "        case ScopeComponent:",
                    "          {",
                    "            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "            return;",
                    "          }",
                    "",
                    "        case OffscreenComponent:",
                    "          {",
                    "            if ( // TODO: Remove this dead flag",
                    "            deletedFiber.mode & ConcurrentMode) {",
                    "              // If this offscreen component is hidden, we already unmounted it. Before",
                    "              // deleting the children, track that it's already unmounted so that we",
                    "              // don't attempt to unmount the effects again.",
                    "              // TODO: If the tree is hidden, in most cases we should be able to skip",
                    "              // over the nested children entirely. An exception is we haven't yet found",
                    "              // the topmost host node to delete, which we already track on the stack.",
                    "              // But the other case is portals, which need to be detached no matter how",
                    "              // deeply they are nested. We should use a subtree flag to track whether a",
                    "              // subtree includes a nested portal.",
                    "              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;",
                    "              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;",
                    "              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;",
                    "            } else {",
                    "              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "            }",
                    "",
                    "            break;",
                    "          }",
                    "",
                    "        default:",
                    "          {",
                    "            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);",
                    "            return;",
                    "          }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23821,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 23995,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 33410,
                "lineBundleEnd": 33584,
                "functionName": "commitDeletionEffectsOnFiber",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 90,
                        "endOffset": 1199240,
                        "startOffset": 1192238
                    },
                    {
                        "count": 50,
                        "endOffset": 1192808,
                        "startOffset": 1192593
                    },
                    {
                        "count": 80,
                        "endOffset": 1193924,
                        "startOffset": 1192869
                    },
                    {
                        "count": 10,
                        "endOffset": 1193878,
                        "startOffset": 1193503
                    },
                    {
                        "count": 0,
                        "endOffset": 1193770,
                        "startOffset": 1193671
                    },
                    {
                        "count": 0,
                        "endOffset": 1194421,
                        "startOffset": 1193934
                    },
                    {
                        "count": 0,
                        "endOffset": 1195039,
                        "startOffset": 1194431
                    },
                    {
                        "count": 10,
                        "endOffset": 1195072,
                        "startOffset": 1195049
                    },
                    {
                        "count": 10,
                        "endOffset": 1195097,
                        "startOffset": 1195081
                    },
                    {
                        "count": 10,
                        "endOffset": 1195125,
                        "startOffset": 1195106
                    },
                    {
                        "count": 10,
                        "endOffset": 1196946,
                        "startOffset": 1195134
                    },
                    {
                        "count": 0,
                        "endOffset": 1196799,
                        "startOffset": 1195317
                    },
                    {
                        "count": 0,
                        "endOffset": 1197489,
                        "startOffset": 1196956
                    },
                    {
                        "count": 0,
                        "endOffset": 1197663,
                        "startOffset": 1197499
                    },
                    {
                        "count": 0,
                        "endOffset": 1199064,
                        "startOffset": 1197673
                    },
                    {
                        "count": 0,
                        "endOffset": 1199226,
                        "startOffset": 1199074
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {",
                    "      while (nextEffect !== null) {",
                    "        var fiber = nextEffect; // Deletion effects fire in parent -> child order",
                    "        // TODO: Check if fiber has a PassiveStatic flag",
                    "",
                    "        setCurrentFiber(fiber);",
                    "        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);",
                    "        resetCurrentFiber();",
                    "        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we",
                    "        // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)",
                    "",
                    "        if (child !== null) {",
                    "          child.return = fiber;",
                    "          nextEffect = child;",
                    "        } else {",
                    "          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24856,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24874,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 34445,
                "lineBundleEnd": 34463,
                "functionName": "commitPassiveUnmountEffectsInsideOfDeletedTree_begin",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 10,
                        "endOffset": 1229228,
                        "startOffset": 1228391
                    },
                    {
                        "count": 90,
                        "endOffset": 1229222,
                        "startOffset": 1228533
                    },
                    {
                        "count": 40,
                        "endOffset": 1229110,
                        "startOffset": 1229037
                    },
                    {
                        "count": 50,
                        "endOffset": 1229214,
                        "startOffset": 1229110
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {",
                    "      while (nextEffect !== null) {",
                    "        var fiber = nextEffect;",
                    "        var sibling = fiber.sibling;",
                    "        var returnFiber = fiber.return;",
                    "        {",
                    "          // Recursively traverse the entire deleted tree and clean up fiber fields.",
                    "          // This is more aggressive than ideal, and the long term goal is to only",
                    "          // have to detach the deleted tree at the root.",
                    "          detachFiberAfterEffects(fiber);",
                    "",
                    "          if (fiber === deletedSubtreeRoot) {",
                    "            nextEffect = null;",
                    "            return;",
                    "          }",
                    "        }",
                    "",
                    "        if (sibling !== null) {",
                    "          sibling.return = returnFiber;",
                    "          nextEffect = sibling;",
                    "          return;",
                    "        }",
                    "",
                    "        nextEffect = returnFiber;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24876,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24901,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 34465,
                "lineBundleEnd": 34490,
                "functionName": "commitPassiveUnmountEffectsInsideOfDeletedTree_complete",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 50,
                        "endOffset": 1230045,
                        "startOffset": 1229234
                    },
                    {
                        "count": 90,
                        "endOffset": 1230039,
                        "startOffset": 1229355
                    },
                    {
                        "count": 10,
                        "endOffset": 1229853,
                        "startOffset": 1229789
                    },
                    {
                        "count": 80,
                        "endOffset": 1229895,
                        "startOffset": 1229863
                    },
                    {
                        "count": 40,
                        "endOffset": 1230039,
                        "startOffset": 1229895
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {",
                    "      switch (current.tag) {",
                    "        case FunctionComponent:",
                    "        case ForwardRef:",
                    "        case SimpleMemoComponent:",
                    "          {",
                    "            if (current.mode & ProfileMode) {",
                    "              startPassiveEffectTimer();",
                    "              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);",
                    "              recordPassiveEffectDuration(current);",
                    "            } else {",
                    "              commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);",
                    "            }",
                    "",
                    "            break;",
                    "          }",
                    "      }",
                    "    } // TODO: Reuse reappearLayoutEffects traversal here?"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24903,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 24920,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 34492,
                "lineBundleEnd": 34509,
                "functionName": "commitPassiveUnmountInsideDeletedTreeOnFiber",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 90,
                        "endOffset": 1230665,
                        "startOffset": 1230051
                    },
                    {
                        "count": 10,
                        "endOffset": 1230200,
                        "startOffset": 1230177
                    },
                    {
                        "count": 10,
                        "endOffset": 1230225,
                        "startOffset": 1230209
                    },
                    {
                        "count": 10,
                        "endOffset": 1230651,
                        "startOffset": 1230234
                    },
                    {
                        "count": 0,
                        "endOffset": 1230511,
                        "startOffset": 1230316
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "            scheduleMicrotask(function () {",
                    "              // In Safari, appending an iframe forces microtasks to run.",
                    "              // https://github.com/facebook/react/issues/22459",
                    "              // We don't support running callbacks in the middle of render",
                    "              // or commit so we need to check against that.",
                    "              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {",
                    "                // Note that this would still prematurely flush the callbacks",
                    "                // if this happens outside render or commit phase (e.g. in an event).",
                    "                flushSyncCallbacks();",
                    "              }",
                    "            });"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25473,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35052,
                "lineBundleEnd": 35062,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1253586,
                        "startOffset": 1252978
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "    function performSyncWorkOnRoot(root) {",
                    "      {",
                    "        syncNestedUpdateFlag();",
                    "      }",
                    "",
                    "      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {",
                    "        throw new Error('Should not already be working.');",
                    "      }",
                    "",
                    "      flushPassiveEffects();",
                    "      var lanes = getNextLanes(root, NoLanes);",
                    "",
                    "      if (!includesSomeLane(lanes, SyncLane)) {",
                    "        // There's no remaining sync work left.",
                    "        ensureRootIsScheduled(root, now());",
                    "        return null;",
                    "      }",
                    "",
                    "      var exitStatus = renderRootSync(root, lanes);",
                    "",
                    "      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {",
                    "        // If something threw an error, try rendering one more time. We'll render",
                    "        // synchronously to block concurrent data mutations, and we'll includes",
                    "        // all pending updates are included. If it still fails after the second",
                    "        // attempt, we'll give up and commit the resulting tree.",
                    "        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);",
                    "",
                    "        if (errorRetryLanes !== NoLanes) {",
                    "          lanes = errorRetryLanes;",
                    "          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);",
                    "        }",
                    "      }",
                    "",
                    "      if (exitStatus === RootFatalErrored) {",
                    "        var fatalError = workInProgressRootFatalError;",
                    "        prepareFreshStack(root, NoLanes);",
                    "        markRootSuspended$1(root, lanes);",
                    "        ensureRootIsScheduled(root, now());",
                    "        throw fatalError;",
                    "      }",
                    "",
                    "      if (exitStatus === RootDidNotComplete) {",
                    "        throw new Error('Root did not complete. This is a bug in React.');",
                    "      } // We now have a consistent tree. Because this is a sync render, we",
                    "      // will commit it even if something suspended.",
                    "",
                    "",
                    "      var finishedWork = root.current.alternate;",
                    "      root.finishedWork = finishedWork;",
                    "      root.finishedLanes = lanes;",
                    "      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next",
                    "      // pending level.",
                    "",
                    "      ensureRootIsScheduled(root, now());",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25884,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 25939,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 35473,
                "lineBundleEnd": 35528,
                "functionName": "performSyncWorkOnRoot",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 1272385,
                        "startOffset": 1270341
                    },
                    {
                        "count": 0,
                        "endOffset": 1270575,
                        "startOffset": 1270507
                    },
                    {
                        "count": 0,
                        "endOffset": 1270822,
                        "startOffset": 1270700
                    },
                    {
                        "count": 0,
                        "endOffset": 1271494,
                        "startOffset": 1270942
                    },
                    {
                        "count": 0,
                        "endOffset": 1271757,
                        "startOffset": 1271539
                    },
                    {
                        "count": 0,
                        "endOffset": 1271888,
                        "startOffset": 1271804
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "  const search = (searchValue: string): void => {",
                    "    dispatch({",
                    "      type: \"SEARCH_MOVIES_REQUEST\",",
                    "    });",
                    "",
                    "    axios(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`).then(",
                    "      (jsonResponse) => {",
                    "        if (jsonResponse.data.Response === \"True\") {",
                    "          dispatch({",
                    "            type: \"SEARCH_MOVIES_SUCCESS\",",
                    "            payload: jsonResponse.data.Search,",
                    "          });",
                    "        } else {",
                    "          dispatch({",
                    "            type: \"SEARCH_MOVIES_FAILURE\",",
                    "            error: jsonResponse.data.Error,",
                    "          });",
                    "        }",
                    "      }",
                    "    );",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "line": 23,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "line": 43,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 164,
                "lineBundleEnd": 181,
                "functionName": "search",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 10011,
                        "startOffset": 9456
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "  const resetInputField = () => {",
                    "    setSearchValue(\"\");",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 12,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 14,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 413,
                "lineBundleEnd": 415,
                "functionName": "resetInputField",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18428,
                        "startOffset": 18372
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008530
            },
            {
                "coverage": [
                    "  const callSearchFunction = (e: React.FormEvent<HTMLFormElement>): void => {",
                    "    e.preventDefault();",
                    "    search(searchValue);",
                    "    resetInputField();",
                    "  };"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 16,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/Search.tsx",
                    "line": 20,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 417,
                "lineBundleEnd": 421,
                "functionName": "callSearchFunction",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 18566,
                        "startOffset": 18458
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008530
            }
        ]
    ],
    [
        1659399008535,
        [
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008535
            }
        ]
    ],
    [
        1659399008536,
        [
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008536
            }
        ]
    ],
    [
        1659399008537,
        [
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008537
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008537
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008537
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008537
            }
        ]
    ],
    [
        1659399008564,
        [
            {
                "coverage": [
                    "    function getSelection(input) {",
                    "      var selection;",
                    "",
                    "      if ('selectionStart' in input) {",
                    "        // Modern browser with input or textarea.",
                    "        selection = {",
                    "          start: input.selectionStart,",
                    "          end: input.selectionEnd",
                    "        };",
                    "      } else {",
                    "        // Content editable or old IE textarea.",
                    "        selection = getOffsets(input);",
                    "      }",
                    "",
                    "      return selection || {",
                    "        start: 0,",
                    "        end: 0",
                    "      };",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8558,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8576,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18152,
                "lineBundleEnd": 18170,
                "functionName": "getSelection",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 586120,
                        "startOffset": 585686
                    },
                    {
                        "count": 0,
                        "endOffset": 586043,
                        "startOffset": 585941
                    },
                    {
                        "count": 0,
                        "endOffset": 586113,
                        "startOffset": 586068
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008564
            },
            {
                "coverage": [
                    "    axios(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`).then(",
                    "      (jsonResponse) => {",
                    "        if (jsonResponse.data.Response === \"True\") {",
                    "          dispatch({",
                    "            type: \"SEARCH_MOVIES_SUCCESS\",",
                    "            payload: jsonResponse.data.Search,",
                    "          });",
                    "        } else {",
                    "          dispatch({",
                    "            type: \"SEARCH_MOVIES_FAILURE\",",
                    "            error: jsonResponse.data.Error,",
                    "          });",
                    "        }",
                    "      }",
                    "    );"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "line": 28,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "line": 42,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 168,
                "lineBundleEnd": 180,
                "functionName": "",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 10005,
                        "startOffset": 9671
                    },
                    {
                        "count": 0,
                        "endOffset": 9999,
                        "startOffset": 9871
                    }
                ],
                "url": "http://localhost:3000/static/js/main.chunk.js",
                "timestamp": 1659399008564
            },
            {
                "url": "https://www.omdbapi.com/?s=spider%20man&apikey=4a3b711b",
                "content": "{\"Search\":[{\"Title\":\"Spider-Man\",\"Year\":\"2002\",\"imdbID\":\"tt0145487\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BZDEyN2NhMjgtMjdhNi00MmNlLWE5YTgtZGE4MzNjMTRlMGEwXkEyXkFqcGdeQXVyNDUyOTg3Njg@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man: No Way Home\",\"Year\":\"2021\",\"imdbID\":\"tt10872600\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BZWMyYzFjYTYtNTRjYi00OGExLWE2YzgtOGRmYjAxZTU3NzBiXkEyXkFqcGdeQXVyMzQ0MzA0NTM@._V1_SX300.jpg\"},{\"Title\":\"The Amazing Spider-Man\",\"Year\":\"2012\",\"imdbID\":\"tt0948470\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjMyOTM4MDMxNV5BMl5BanBnXkFtZTcwNjIyNzExOA@@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man 2\",\"Year\":\"2004\",\"imdbID\":\"tt0316654\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMzY2ODk4NmUtOTVmNi00ZTdkLTlmOWYtMmE2OWVhNTU2OTVkXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man: Homecoming\",\"Year\":\"2017\",\"imdbID\":\"tt2250912\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BNTk4ODQ1MzgzNl5BMl5BanBnXkFtZTgwMTMyMzM4MTI@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man 3\",\"Year\":\"2007\",\"imdbID\":\"tt0413300\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BYTk3MDljOWQtNGI2My00OTEzLTlhYjQtOTQ4ODM2MzUwY2IwXkEyXkFqcGdeQXVyNTIzOTk5ODM@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man: Into the Spider-Verse\",\"Year\":\"2018\",\"imdbID\":\"tt4633694\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjMwNDkxMTgzOF5BMl5BanBnXkFtZTgwNTkwNTQ3NjM@._V1_SX300.jpg\"},{\"Title\":\"The Amazing Spider-Man 2\",\"Year\":\"2014\",\"imdbID\":\"tt1872181\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BOTA5NDYxNTg0OV5BMl5BanBnXkFtZTgwODE5NzU1MTE@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man: Far from Home\",\"Year\":\"2019\",\"imdbID\":\"tt6320628\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMGZlNTY1ZWUtYTMzNC00ZjUyLWE0MjQtMTMxN2E3ODYxMWVmXkEyXkFqcGdeQXVyMDM2NDM2MQ@@._V1_SX300.jpg\"},{\"Title\":\"Spider-Man: The Animated Series\",\"Year\":\"1994–1998\",\"imdbID\":\"tt0112175\",\"Type\":\"series\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMmQ1NzBlYmItNmZkZi00OTZkLTg5YTEtNTI5YjczZjk3Yjc1XkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_SX300.jpg\"}],\"totalResults\":\"310\",\"Response\":\"True\"}",
                "status": 200,
                "timestamp": 1659399008564,
                "contentType": "application/json",
                "requestType": "xhr"
            }
        ]
    ],
    [
        1659399008571,
        [
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            },
            {
                "type": "childList",
                "coverage": [
                    "      <div className=\"movies\">",
                    "        {movies.map((movie, index) => (",
                    "          <Movie key={`${index}-${movie.Title}`} movie={movie} />"
                ],
                "startPosition": {
                    "line": 53,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "endPosition": {
                    "line": 55,
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx"
                },
                "location": {
                    "fileName": "/Users/abdulaziz/Documents/projects/movies-search/src/components/App.tsx",
                    "lineNumber": 53,
                    "columnNumber": 7
                },
                "state": {},
                "timestamp": 1659399008571
            }
        ]
    ],
    [
        1659399008616,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function shallowEqual(objA, objB) {",
                    "      if (objectIs(objA, objB)) {",
                    "        return true;",
                    "      }",
                    "",
                    "      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {",
                    "        return false;",
                    "      }",
                    "",
                    "      var keysA = Object.keys(objA);",
                    "      var keysB = Object.keys(objB);",
                    "",
                    "      if (keysA.length !== keysB.length) {",
                    "        return false;",
                    "      } // Test for A's keys different from B.",
                    "",
                    "",
                    "      for (var i = 0; i < keysA.length; i++) {",
                    "        var currentKey = keysA[i];",
                    "",
                    "        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {",
                    "          return false;",
                    "        }",
                    "      }",
                    "",
                    "      return true;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8154,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8180,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17748,
                "lineBundleEnd": 17774,
                "functionName": "shallowEqual",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 573283,
                        "startOffset": 572610
                    },
                    {
                        "count": 0,
                        "endOffset": 572708,
                        "startOffset": 572678
                    },
                    {
                        "count": 0,
                        "endOffset": 572839,
                        "startOffset": 572808
                    },
                    {
                        "count": 0,
                        "endOffset": 572988,
                        "startOffset": 572957
                    },
                    {
                        "count": 0,
                        "endOffset": 573282,
                        "startOffset": 573257
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getSelection$1(node) {",
                    "      if ('selectionStart' in node && hasSelectionCapabilities(node)) {",
                    "        return {",
                    "          start: node.selectionStart,",
                    "          end: node.selectionEnd",
                    "        };",
                    "      } else {",
                    "        var win = node.ownerDocument && node.ownerDocument.defaultView || window;",
                    "        var selection = win.getSelection();",
                    "        return {",
                    "          anchorNode: selection.anchorNode,",
                    "          anchorOffset: selection.anchorOffset,",
                    "          focusNode: selection.focusNode,",
                    "          focusOffset: selection.focusOffset",
                    "        };",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8618,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8634,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18212,
                "lineBundleEnd": 18228,
                "functionName": "getSelection$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588005,
                        "startOffset": 587441
                    },
                    {
                        "count": 0,
                        "endOffset": 587999,
                        "startOffset": 587651
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getEventTargetDocument(eventTarget) {",
                    "      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8640,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8642,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18234,
                "lineBundleEnd": 18236,
                "functionName": "getEventTargetDocument",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 588289,
                        "startOffset": 588082
                    },
                    {
                        "count": 0,
                        "endOffset": 588199,
                        "startOffset": 588177
                    },
                    {
                        "count": 0,
                        "endOffset": 588254,
                        "startOffset": 588241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {",
                    "      // Ensure we have the right element, and that the user is not dragging a",
                    "      // selection (this matches native `select` event behavior). In HTML5, select",
                    "      // fires only on input and textarea thus if there's no focused element we",
                    "      // won't dispatch.",
                    "      var doc = getEventTargetDocument(nativeEventTarget);",
                    "",
                    "      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {",
                    "        return;",
                    "      } // Only fire when selection has actually changed.",
                    "",
                    "",
                    "      var currentSelection = getSelection$1(activeElement$1);",
                    "",
                    "      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {",
                    "        lastSelection = currentSelection;",
                    "        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');",
                    "",
                    "        if (listeners.length > 0) {",
                    "          var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);",
                    "          dispatchQueue.push({",
                    "            event: event,",
                    "            listeners: listeners",
                    "          });",
                    "          event.target = activeElement$1;",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8652,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8679,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18246,
                "lineBundleEnd": 18273,
                "functionName": "constructSelectEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 589633,
                        "startOffset": 588479
                    },
                    {
                        "count": 0,
                        "endOffset": 589003,
                        "startOffset": 588978
                    },
                    {
                        "count": 0,
                        "endOffset": 589619,
                        "startOffset": 589360
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function accumulateTwoPhaseListeners(targetFiber, reactName) {",
                    "      var captureName = reactName + 'Capture';",
                    "      var listeners = [];",
                    "      var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.",
                    "",
                    "      while (instance !== null) {",
                    "        var _instance3 = instance,",
                    "            stateNode = _instance3.stateNode,",
                    "            tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "          var captureListener = getListener(instance, captureName);",
                    "",
                    "          if (captureListener != null) {",
                    "            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "          }",
                    "",
                    "          var bubbleListener = getListener(instance, reactName);",
                    "",
                    "          if (bubbleListener != null) {",
                    "            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      return listeners;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9373,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9402,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18967,
                "lineBundleEnd": 18996,
                "functionName": "accumulateTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 618676,
                        "startOffset": 617608
                    },
                    {
                        "count": 8,
                        "endOffset": 618645,
                        "startOffset": 617882
                    },
                    {
                        "count": 4,
                        "endOffset": 618115,
                        "startOffset": 618094
                    },
                    {
                        "count": 4,
                        "endOffset": 618600,
                        "startOffset": 618117
                    },
                    {
                        "count": 0,
                        "endOffset": 618378,
                        "startOffset": 618268
                    },
                    {
                        "count": 0,
                        "endOffset": 618590,
                        "startOffset": 618484
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008616
            }
        ]
    ],
    [
        1659399008928,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008928
            }
        ]
    ],
    [
        1659399008940,
        [
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008940
            }
        ]
    ],
    [
        1659399008969,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 12,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 116,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 20,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 96,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 2,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 4,
                        "endOffset": 557723,
                        "startOffset": 557686
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    },
                    {
                        "count": 4,
                        "endOffset": 557779,
                        "startOffset": 557753
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 2,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 2,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 4,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 2,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 5,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 5,
                        "endOffset": 568497,
                        "startOffset": 568465
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 568922,
                        "startOffset": 568896
                    },
                    {
                        "count": 0,
                        "endOffset": 569192,
                        "startOffset": 569157
                    },
                    {
                        "count": 4,
                        "endOffset": 569269,
                        "startOffset": 569245
                    },
                    {
                        "count": 2,
                        "endOffset": 569284,
                        "startOffset": 569269
                    },
                    {
                        "count": 2,
                        "endOffset": 569515,
                        "startOffset": 569286
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 2,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 2,
                        "endOffset": 570345,
                        "startOffset": 569886
                    },
                    {
                        "count": 0,
                        "endOffset": 570016,
                        "startOffset": 569992
                    },
                    {
                        "count": 0,
                        "endOffset": 570113,
                        "startOffset": 570107
                    },
                    {
                        "count": 0,
                        "endOffset": 570289,
                        "startOffset": 570267
                    },
                    {
                        "count": 0,
                        "endOffset": 570327,
                        "startOffset": 570291
                    },
                    {
                        "count": 0,
                        "endOffset": 570459,
                        "startOffset": 570345
                    },
                    {
                        "count": 2,
                        "endOffset": 570484,
                        "startOffset": 570459
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 2,
                        "endOffset": 570782,
                        "startOffset": 570564
                    },
                    {
                        "count": 1,
                        "endOffset": 570815,
                        "startOffset": 570782
                    },
                    {
                        "count": 1,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 2,
                        "endOffset": 571037,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 571037
                    },
                    {
                        "count": 2,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 2,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getParent(inst) {",
                    "      if (inst === null) {",
                    "        return null;",
                    "      }",
                    "",
                    "      do {",
                    "        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.",
                    "        // That is depending on if we want nested subtrees (layers) to bubble",
                    "        // events to their parent. We could also go through parentNode on the",
                    "        // host node but that wouldn't work for React Native and doesn't let us",
                    "        // do the portal feature.",
                    "      } while (inst && inst.tag !== HostComponent);",
                    "",
                    "      if (inst) {",
                    "        return inst;",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9404,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9422,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18998,
                "lineBundleEnd": 19016,
                "functionName": "getParent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 619258,
                        "startOffset": 618682
                    },
                    {
                        "count": 0,
                        "endOffset": 618764,
                        "startOffset": 618734
                    },
                    {
                        "count": 32,
                        "endOffset": 619140,
                        "startOffset": 618775
                    },
                    {
                        "count": 28,
                        "endOffset": 619182,
                        "startOffset": 619153
                    },
                    {
                        "count": 12,
                        "endOffset": 619232,
                        "startOffset": 619202
                    },
                    {
                        "count": 4,
                        "endOffset": 619257,
                        "startOffset": 619232
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getLowestCommonAncestor(instA, instB) {",
                    "      var nodeA = instA;",
                    "      var nodeB = instB;",
                    "      var depthA = 0;",
                    "",
                    "      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {",
                    "        depthA++;",
                    "      }",
                    "",
                    "      var depthB = 0;",
                    "",
                    "      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {",
                    "        depthB++;",
                    "      } // If A is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthA - depthB > 0) {",
                    "        nodeA = getParent(nodeA);",
                    "        depthA--;",
                    "      } // If B is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthB - depthA > 0) {",
                    "        nodeB = getParent(nodeB);",
                    "        depthB--;",
                    "      } // Walk in lockstep until we find a match.",
                    "",
                    "",
                    "      var depth = depthA;",
                    "",
                    "      while (depth--) {",
                    "        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {",
                    "          return nodeA;",
                    "        }",
                    "",
                    "        nodeA = getParent(nodeA);",
                    "        nodeB = getParent(nodeB);",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9429,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9469,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19023,
                "lineBundleEnd": 19063,
                "functionName": "getLowestCommonAncestor",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 620273,
                        "startOffset": 619381
                    },
                    {
                        "count": 8,
                        "endOffset": 619593,
                        "startOffset": 619566
                    },
                    {
                        "count": 6,
                        "endOffset": 619708,
                        "startOffset": 619681
                    },
                    {
                        "count": 0,
                        "endOffset": 619962,
                        "startOffset": 619901
                    },
                    {
                        "count": 0,
                        "endOffset": 620133,
                        "startOffset": 620087
                    },
                    {
                        "count": 0,
                        "endOffset": 620272,
                        "startOffset": 620170
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 6,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 4,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 2,
                        "endOffset": 620798,
                        "startOffset": 620580
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 2,
                        "endOffset": 620885,
                        "startOffset": 620828
                    },
                    {
                        "count": 2,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621206,
                        "startOffset": 620961
                    },
                    {
                        "count": 0,
                        "endOffset": 621460,
                        "startOffset": 621350
                    },
                    {
                        "count": 2,
                        "endOffset": 621527,
                        "startOffset": 621482
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 0,
                        "endOffset": 622061,
                        "startOffset": 622055
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399008969
            }
        ]
    ],
    [
        1659399009001,
        [
            {
                "coverage": [
                    "    function isReplayingEvent(event) {",
                    "      return event === currentReplayingEvent;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3807,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 3809,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 13401,
                "lineBundleEnd": 13403,
                "functionName": "isReplayingEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 425226,
                        "startOffset": 425140
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(ContinuousEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6463,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6475,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16057,
                "lineBundleEnd": 16069,
                "functionName": "dispatchContinuousEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 16,
                        "endOffset": 515418,
                        "startOffset": 514863
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {",
                    "        this._reactName = reactName;",
                    "        this._targetInst = targetInst;",
                    "        this.type = reactEventType;",
                    "        this.nativeEvent = nativeEvent;",
                    "        this.target = nativeEventTarget;",
                    "        this.currentTarget = null;",
                    "",
                    "        for (var _propName in Interface) {",
                    "          if (!Interface.hasOwnProperty(_propName)) {",
                    "            continue;",
                    "          }",
                    "",
                    "          var normalize = Interface[_propName];",
                    "",
                    "          if (normalize) {",
                    "            this[_propName] = normalize(nativeEvent);",
                    "          } else {",
                    "            this[_propName] = nativeEvent[_propName];",
                    "          }",
                    "        }",
                    "",
                    "        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;",
                    "",
                    "        if (defaultPrevented) {",
                    "          this.isDefaultPrevented = functionThatReturnsTrue;",
                    "        } else {",
                    "          this.isDefaultPrevented = functionThatReturnsFalse;",
                    "        }",
                    "",
                    "        this.isPropagationStopped = functionThatReturnsFalse;",
                    "        return this;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6870,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6902,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16464,
                "lineBundleEnd": 16496,
                "functionName": "SyntheticBaseEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 529323,
                        "startOffset": 528225
                    },
                    {
                        "count": 232,
                        "endOffset": 528911,
                        "startOffset": 528596
                    },
                    {
                        "count": 0,
                        "endOffset": 528685,
                        "startOffset": 528650
                    },
                    {
                        "count": 40,
                        "endOffset": 528828,
                        "startOffset": 528761
                    },
                    {
                        "count": 192,
                        "endOffset": 528901,
                        "startOffset": 528828
                    },
                    {
                        "count": 0,
                        "endOffset": 529047,
                        "startOffset": 529012
                    },
                    {
                        "count": 0,
                        "endOffset": 529152,
                        "startOffset": 529080
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "      timeStamp: function timeStamp(event) {",
                    "        return event.timeStamp || Date.now();",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6969,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6971,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16563,
                "lineBundleEnd": 16565,
                "functionName": "timeStamp",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 531574,
                        "startOffset": 531493
                    },
                    {
                        "count": 0,
                        "endOffset": 531565,
                        "startOffset": 531552
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "      relatedTarget: function relatedTarget(event) {",
                    "        if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;",
                    "        return event.relatedTarget;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7018,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7021,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16612,
                "lineBundleEnd": 16615,
                "functionName": "relatedTarget",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 532989,
                        "startOffset": 532782
                    },
                    {
                        "count": 0,
                        "endOffset": 532945,
                        "startOffset": 532861
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "      movementX: function movementX(event) {",
                    "        if ('movementX' in event) {",
                    "          return event.movementX;",
                    "        }",
                    "",
                    "        updateMouseMovementPolyfillState(event);",
                    "        return lastMovementX;",
                    "      },"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7022,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7029,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16616,
                "lineBundleEnd": 16623,
                "functionName": "movementX",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 533203,
                        "startOffset": 533008
                    },
                    {
                        "count": 0,
                        "endOffset": 533202,
                        "startOffset": 533115
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "      movementY: function movementY(event) {",
                    "        if ('movementY' in event) {",
                    "          return event.movementY;",
                    "        } // Don't need to call updateMouseMovementPolyfillState() here",
                    "        // because it's guaranteed to have already run when movementX",
                    "        // was copied.",
                    "",
                    "",
                    "        return lastMovementY;",
                    "      }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7030,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7039,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16624,
                "lineBundleEnd": 16633,
                "functionName": "movementY",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 533524,
                        "startOffset": 533222
                    },
                    {
                        "count": 0,
                        "endOffset": 533523,
                        "startOffset": 533329
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getEventModifierState(nativeEvent) {",
                    "      return modifierStateGetter;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7224,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7226,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16818,
                "lineBundleEnd": 16820,
                "functionName": "getEventModifierState",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 539319,
                        "startOffset": 539234
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557686,
                        "startOffset": 557628
                    },
                    {
                        "count": 0,
                        "endOffset": 557753,
                        "startOffset": 557723
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 559701,
                        "startOffset": 559507
                    },
                    {
                        "count": 0,
                        "endOffset": 559694,
                        "startOffset": 559671
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function shouldUseClickEvent(elem) {",
                    "      // Use the `click` event to detect changes to checkbox and radio inputs.",
                    "      // This approach works across all browsers, whereas `change` does not fire",
                    "      // until `blur` in IE8.",
                    "      var nodeName = elem.nodeName;",
                    "      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7942,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7948,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17536,
                "lineBundleEnd": 17542,
                "functionName": "shouldUseClickEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 565103,
                        "startOffset": 564719
                    },
                    {
                        "count": 0,
                        "endOffset": 565096,
                        "startOffset": 565042
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566850,
                        "startOffset": 566582
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566893
                    },
                    {
                        "count": 0,
                        "endOffset": 567206,
                        "startOffset": 566989
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    },
                    {
                        "count": 0,
                        "endOffset": 567465,
                        "startOffset": 567409
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 7,
                        "endOffset": 568412,
                        "startOffset": 568379
                    },
                    {
                        "count": 6,
                        "endOffset": 568497,
                        "startOffset": 568465
                    },
                    {
                        "count": 2,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 2,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 568922,
                        "startOffset": 568896
                    },
                    {
                        "count": 0,
                        "endOffset": 569192,
                        "startOffset": 569157
                    },
                    {
                        "count": 6,
                        "endOffset": 569269,
                        "startOffset": 569245
                    },
                    {
                        "count": 2,
                        "endOffset": 569284,
                        "startOffset": 569269
                    },
                    {
                        "count": 2,
                        "endOffset": 569375,
                        "startOffset": 569286
                    },
                    {
                        "count": 4,
                        "endOffset": 569515,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 569617,
                        "startOffset": 569515
                    },
                    {
                        "count": 4,
                        "endOffset": 569886,
                        "startOffset": 569617
                    },
                    {
                        "count": 0,
                        "endOffset": 569826,
                        "startOffset": 569807
                    },
                    {
                        "count": 0,
                        "endOffset": 569878,
                        "startOffset": 569837
                    },
                    {
                        "count": 4,
                        "endOffset": 570345,
                        "startOffset": 569886
                    },
                    {
                        "count": 2,
                        "endOffset": 570016,
                        "startOffset": 569992
                    },
                    {
                        "count": 2,
                        "endOffset": 570106,
                        "startOffset": 570068
                    },
                    {
                        "count": 2,
                        "endOffset": 570113,
                        "startOffset": 570107
                    },
                    {
                        "count": 2,
                        "endOffset": 570337,
                        "startOffset": 570141
                    },
                    {
                        "count": 0,
                        "endOffset": 570289,
                        "startOffset": 570267
                    },
                    {
                        "count": 0,
                        "endOffset": 570327,
                        "startOffset": 570291
                    },
                    {
                        "count": 0,
                        "endOffset": 570459,
                        "startOffset": 570345
                    },
                    {
                        "count": 4,
                        "endOffset": 570484,
                        "startOffset": 570459
                    },
                    {
                        "count": 0,
                        "endOffset": 570564,
                        "startOffset": 570484
                    },
                    {
                        "count": 4,
                        "endOffset": 570782,
                        "startOffset": 570564
                    },
                    {
                        "count": 2,
                        "endOffset": 570815,
                        "startOffset": 570782
                    },
                    {
                        "count": 2,
                        "endOffset": 571001,
                        "startOffset": 570817
                    },
                    {
                        "count": 4,
                        "endOffset": 571037,
                        "startOffset": 571001
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 571037
                    },
                    {
                        "count": 4,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 2,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 2,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 4,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 8,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 590807,
                        "startOffset": 590670
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getParent(inst) {",
                    "      if (inst === null) {",
                    "        return null;",
                    "      }",
                    "",
                    "      do {",
                    "        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.",
                    "        // That is depending on if we want nested subtrees (layers) to bubble",
                    "        // events to their parent. We could also go through parentNode on the",
                    "        // host node but that wouldn't work for React Native and doesn't let us",
                    "        // do the portal feature.",
                    "      } while (inst && inst.tag !== HostComponent);",
                    "",
                    "      if (inst) {",
                    "        return inst;",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9404,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9422,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18998,
                "lineBundleEnd": 19016,
                "functionName": "getParent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 12,
                        "endOffset": 619258,
                        "startOffset": 618682
                    },
                    {
                        "count": 0,
                        "endOffset": 618764,
                        "startOffset": 618734
                    },
                    {
                        "count": 28,
                        "endOffset": 619140,
                        "startOffset": 618775
                    },
                    {
                        "count": 24,
                        "endOffset": 619182,
                        "startOffset": 619153
                    },
                    {
                        "count": 8,
                        "endOffset": 619232,
                        "startOffset": 619202
                    },
                    {
                        "count": 4,
                        "endOffset": 619257,
                        "startOffset": 619232
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getLowestCommonAncestor(instA, instB) {",
                    "      var nodeA = instA;",
                    "      var nodeB = instB;",
                    "      var depthA = 0;",
                    "",
                    "      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {",
                    "        depthA++;",
                    "      }",
                    "",
                    "      var depthB = 0;",
                    "",
                    "      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {",
                    "        depthB++;",
                    "      } // If A is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthA - depthB > 0) {",
                    "        nodeA = getParent(nodeA);",
                    "        depthA--;",
                    "      } // If B is deeper, crawl up.",
                    "",
                    "",
                    "      while (depthB - depthA > 0) {",
                    "        nodeB = getParent(nodeB);",
                    "        depthB--;",
                    "      } // Walk in lockstep until we find a match.",
                    "",
                    "",
                    "      var depth = depthA;",
                    "",
                    "      while (depth--) {",
                    "        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {",
                    "          return nodeA;",
                    "        }",
                    "",
                    "        nodeA = getParent(nodeA);",
                    "        nodeB = getParent(nodeB);",
                    "      }",
                    "",
                    "      return null;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9429,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9469,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19023,
                "lineBundleEnd": 19063,
                "functionName": "getLowestCommonAncestor",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 620273,
                        "startOffset": 619381
                    },
                    {
                        "count": 6,
                        "endOffset": 619593,
                        "startOffset": 619566
                    },
                    {
                        "count": 4,
                        "endOffset": 619708,
                        "startOffset": 619681
                    },
                    {
                        "count": 0,
                        "endOffset": 619962,
                        "startOffset": 619901
                    },
                    {
                        "count": 0,
                        "endOffset": 620133,
                        "startOffset": 620087
                    },
                    {
                        "count": 0,
                        "endOffset": 620272,
                        "startOffset": 620170
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {",
                    "      var registrationName = event._reactName;",
                    "      var listeners = [];",
                    "      var instance = target;",
                    "",
                    "      while (instance !== null) {",
                    "        if (instance === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        var _instance4 = instance,",
                    "            alternate = _instance4.alternate,",
                    "            stateNode = _instance4.stateNode,",
                    "            tag = _instance4.tag;",
                    "",
                    "        if (alternate !== null && alternate === common) {",
                    "          break;",
                    "        }",
                    "",
                    "        if (tag === HostComponent && stateNode !== null) {",
                    "          var currentTarget = stateNode;",
                    "",
                    "          if (inCapturePhase) {",
                    "            var captureListener = getListener(instance, registrationName);",
                    "",
                    "            if (captureListener != null) {",
                    "              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));",
                    "            }",
                    "          } else if (!inCapturePhase) {",
                    "            var bubbleListener = getListener(instance, registrationName);",
                    "",
                    "            if (bubbleListener != null) {",
                    "              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));",
                    "            }",
                    "          }",
                    "        }",
                    "",
                    "        instance = instance.return;",
                    "      }",
                    "",
                    "      if (listeners.length !== 0) {",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "      }",
                    "    } // We should only use this function for:"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9471,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9517,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19065,
                "lineBundleEnd": 19111,
                "functionName": "accumulateEnterLeaveListenersForEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 6,
                        "endOffset": 621674,
                        "startOffset": 620279
                    },
                    {
                        "count": 18,
                        "endOffset": 621527,
                        "startOffset": 620517
                    },
                    {
                        "count": 4,
                        "endOffset": 620580,
                        "startOffset": 620552
                    },
                    {
                        "count": 14,
                        "endOffset": 620798,
                        "startOffset": 620580
                    },
                    {
                        "count": 0,
                        "endOffset": 620828,
                        "startOffset": 620800
                    },
                    {
                        "count": 14,
                        "endOffset": 620864,
                        "startOffset": 620828
                    },
                    {
                        "count": 6,
                        "endOffset": 620885,
                        "startOffset": 620864
                    },
                    {
                        "count": 6,
                        "endOffset": 621482,
                        "startOffset": 620887
                    },
                    {
                        "count": 0,
                        "endOffset": 621206,
                        "startOffset": 620961
                    },
                    {
                        "count": 0,
                        "endOffset": 621460,
                        "startOffset": 621350
                    },
                    {
                        "count": 14,
                        "endOffset": 621527,
                        "startOffset": 621482
                    },
                    {
                        "count": 0,
                        "endOffset": 621668,
                        "startOffset": 621563
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {",
                    "      var common = from && to ? getLowestCommonAncestor(from, to) : null;",
                    "",
                    "      if (from !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);",
                    "      }",
                    "",
                    "      if (to !== null && enterEvent !== null) {",
                    "        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9524,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 9534,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 19118,
                "lineBundleEnd": 19128,
                "functionName": "accumulateEnterLeaveTwoPhaseListeners",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 4,
                        "endOffset": 622348,
                        "startOffset": 621891
                    },
                    {
                        "count": 2,
                        "endOffset": 622054,
                        "startOffset": 622019
                    },
                    {
                        "count": 2,
                        "endOffset": 622061,
                        "startOffset": 622055
                    },
                    {
                        "count": 2,
                        "endOffset": 622239,
                        "startOffset": 622217
                    },
                    {
                        "count": 2,
                        "endOffset": 622342,
                        "startOffset": 622241
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 22,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009001
            }
        ]
    ],
    [
        1659399009608,
        [
            {
                "coverage": [
                    "    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {",
                    "      var previousPriority = getCurrentUpdatePriority();",
                    "      var prevTransition = ReactCurrentBatchConfig.transition;",
                    "      ReactCurrentBatchConfig.transition = null;",
                    "",
                    "      try {",
                    "        setCurrentUpdatePriority(DiscreteEventPriority);",
                    "        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);",
                    "      } finally {",
                    "        setCurrentUpdatePriority(previousPriority);",
                    "        ReactCurrentBatchConfig.transition = prevTransition;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6449,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 6461,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16043,
                "lineBundleEnd": 16055,
                "functionName": "dispatchDiscreteEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 514857,
                        "startOffset": 514306
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function getCompositionEventType(domEventName) {",
                    "      switch (domEventName) {",
                    "        case 'compositionstart':",
                    "          return 'onCompositionStart';",
                    "",
                    "        case 'compositionend':",
                    "          return 'onCompositionEnd';",
                    "",
                    "        case 'compositionupdate':",
                    "          return 'onCompositionUpdate';",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7398,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7409,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 16992,
                "lineBundleEnd": 17003,
                "functionName": "getCompositionEventType",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 546231,
                        "startOffset": 545923
                    },
                    {
                        "count": 0,
                        "endOffset": 546073,
                        "startOffset": 546010
                    },
                    {
                        "count": 0,
                        "endOffset": 546142,
                        "startOffset": 546083
                    },
                    {
                        "count": 0,
                        "endOffset": 546217,
                        "startOffset": 546152
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var eventType;",
                    "      var fallbackData;",
                    "",
                    "      if (canUseCompositionEvent) {",
                    "        eventType = getCompositionEventType(domEventName);",
                    "      } else if (!isComposing) {",
                    "        if (isFallbackCompositionStart(domEventName, nativeEvent)) {",
                    "          eventType = 'onCompositionStart';",
                    "        }",
                    "      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {",
                    "        eventType = 'onCompositionEnd';",
                    "      }",
                    "",
                    "      if (!eventType) {",
                    "        return null;",
                    "      }",
                    "",
                    "      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {",
                    "        // The current composition is stored statically and must not be",
                    "        // overwritten while composition continues.",
                    "        if (!isComposing && eventType === 'onCompositionStart') {",
                    "          isComposing = initialize(nativeEventTarget);",
                    "        } else if (eventType === 'onCompositionEnd') {",
                    "          if (isComposing) {",
                    "            fallbackData = getData();",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "",
                    "        if (fallbackData) {",
                    "          // Inject data generated from fallback path into the synthetic event.",
                    "          // This matches the property of native CompositionEventInterface.",
                    "          event.data = fallbackData;",
                    "        } else {",
                    "          var customData = getDataFromCustomEvent(nativeEvent);",
                    "",
                    "          if (customData !== null) {",
                    "            event.data = customData;",
                    "          }",
                    "        }",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7487,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7538,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17081,
                "lineBundleEnd": 17132,
                "functionName": "extractCompositionEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 550294,
                        "startOffset": 548510
                    },
                    {
                        "count": 0,
                        "endOffset": 549034,
                        "startOffset": 548766
                    },
                    {
                        "count": 0,
                        "endOffset": 549160,
                        "startOffset": 549088
                    },
                    {
                        "count": 0,
                        "endOffset": 550288,
                        "startOffset": 549162
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function getNativeBeforeInputChars(domEventName, nativeEvent) {",
                    "      switch (domEventName) {",
                    "        case 'compositionend':",
                    "          return getDataFromCustomEvent(nativeEvent);",
                    "",
                    "        case 'keypress':",
                    "          /**",
                    "           * If native `textInput` events are available, our goal is to make",
                    "           * use of them. However, there is a special case: the spacebar key.",
                    "           * In Webkit, preventing default on a spacebar `textInput` event",
                    "           * cancels character insertion, but it *also* causes the browser",
                    "           * to fall back to its default spacebar behavior of scrolling the",
                    "           * page.",
                    "           *",
                    "           * Tracking at:",
                    "           * https://code.google.com/p/chromium/issues/detail?id=355103",
                    "           *",
                    "           * To avoid this issue, use the keypress event as if no `textInput`",
                    "           * event is available.",
                    "           */",
                    "          var which = nativeEvent.which;",
                    "",
                    "          if (which !== SPACEBAR_CODE) {",
                    "            return null;",
                    "          }",
                    "",
                    "          hasSpaceKeypress = true;",
                    "          return SPACEBAR_CHAR;",
                    "",
                    "        case 'textInput':",
                    "          // Record the characters to be added to the DOM.",
                    "          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled",
                    "          // it at the keypress level and bail immediately. Android Chrome",
                    "          // doesn't give us keycodes, so we need to ignore it.",
                    "",
                    "          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {",
                    "            return null;",
                    "          }",
                    "",
                    "          return chars;",
                    "",
                    "        default:",
                    "          // For other native event types, do nothing.",
                    "          return null;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7540,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7585,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17134,
                "lineBundleEnd": 17179,
                "functionName": "getNativeBeforeInputChars",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 551923,
                        "startOffset": 550300
                    },
                    {
                        "count": 0,
                        "endOffset": 550478,
                        "startOffset": 550402
                    },
                    {
                        "count": 0,
                        "endOffset": 551355,
                        "startOffset": 550488
                    },
                    {
                        "count": 0,
                        "endOffset": 551813,
                        "startOffset": 551365
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {",
                    "      var chars;",
                    "",
                    "      if (canUseTextInputEvent) {",
                    "        chars = getNativeBeforeInputChars(domEventName, nativeEvent);",
                    "      } else {",
                    "        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);",
                    "      } // If no characters are being inserted, no BeforeInput event should",
                    "      // be fired.",
                    "",
                    "",
                    "      if (!chars) {",
                    "        return null;",
                    "      }",
                    "",
                    "      var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');",
                    "",
                    "      if (listeners.length > 0) {",
                    "        var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);",
                    "        dispatchQueue.push({",
                    "          event: event,",
                    "          listeners: listeners",
                    "        });",
                    "        event.data = chars;",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7662,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7687,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17256,
                "lineBundleEnd": 17281,
                "functionName": "extractBeforeInputEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 555740,
                        "startOffset": 554909
                    },
                    {
                        "count": 0,
                        "endOffset": 555233,
                        "startOffset": 555146
                    },
                    {
                        "count": 0,
                        "endOffset": 555734,
                        "startOffset": 555371
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7708,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7711,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17302,
                "lineBundleEnd": 17305,
                "functionName": "extractEvents",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557007,
                        "startOffset": 556661
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function isTextInputElement(elem) {",
                    "      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();",
                    "",
                    "      if (nodeName === 'input') {",
                    "        return !!supportedInputTypes[elem.type];",
                    "      }",
                    "",
                    "      if (nodeName === 'textarea') {",
                    "        return true;",
                    "      }",
                    "",
                    "      return false;",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7735,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7747,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17329,
                "lineBundleEnd": 17341,
                "functionName": "isTextInputElement",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 557780,
                        "startOffset": 557484
                    },
                    {
                        "count": 0,
                        "endOffset": 557779,
                        "startOffset": 557686
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function shouldUseChangeEvent(elem) {",
                    "      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();",
                    "      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7808,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7811,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17402,
                "lineBundleEnd": 17405,
                "functionName": "shouldUseChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 559701,
                        "startOffset": 559507
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {",
                    "      if (domEventName === 'input' || domEventName === 'change') {",
                    "        return getInstIfValueChanged(targetInst);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7956,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7960,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17550,
                "lineBundleEnd": 17554,
                "functionName": "getTargetInstForInputOrChangeEvent",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565482,
                        "startOffset": 565280
                    },
                    {
                        "count": 0,
                        "endOffset": 565476,
                        "startOffset": 565417
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function handleControlledInputBlur(node) {",
                    "      var state = node._wrapperState;",
                    "",
                    "      if (!state || !state.controlled || node.type !== 'number') {",
                    "        return;",
                    "      }",
                    "",
                    "      {",
                    "        // If controlled, assign the value attribute to the current value on blur",
                    "        setDefaultValue(node, 'number', node.value);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7962,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7973,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17556,
                "lineBundleEnd": 17567,
                "functionName": "handleControlledInputBlur",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 565818,
                        "startOffset": 565488
                    },
                    {
                        "count": 0,
                        "endOffset": 565817,
                        "startOffset": 565660
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "      var getTargetInstFunc, handleEventFunc;",
                    "",
                    "      if (shouldUseChangeEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForChangeEvent;",
                    "      } else if (isTextInputElement(targetNode)) {",
                    "        if (isInputEventSupported) {",
                    "          getTargetInstFunc = getTargetInstForInputOrChangeEvent;",
                    "        } else {",
                    "          getTargetInstFunc = getTargetInstForInputEventPolyfill;",
                    "          handleEventFunc = handleEventsForInputEventPolyfill;",
                    "        }",
                    "      } else if (shouldUseClickEvent(targetNode)) {",
                    "        getTargetInstFunc = getTargetInstForClickEvent;",
                    "      }",
                    "",
                    "      if (getTargetInstFunc) {",
                    "        var inst = getTargetInstFunc(domEventName, targetInst);",
                    "",
                    "        if (inst) {",
                    "          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);",
                    "          return;",
                    "        }",
                    "      }",
                    "",
                    "      if (handleEventFunc) {",
                    "        handleEventFunc(domEventName, targetNode, targetInst);",
                    "      } // When blurring, set the value attribute for number inputs",
                    "",
                    "",
                    "      if (domEventName === 'focusout') {",
                    "        handleControlledInputBlur(targetNode);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 7986,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8020,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17580,
                "lineBundleEnd": 17614,
                "functionName": "extractEvents$1",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 567471,
                        "startOffset": 566170
                    },
                    {
                        "count": 0,
                        "endOffset": 566381,
                        "startOffset": 566373
                    },
                    {
                        "count": 0,
                        "endOffset": 566540,
                        "startOffset": 566474
                    },
                    {
                        "count": 0,
                        "endOffset": 566842,
                        "startOffset": 566696
                    },
                    {
                        "count": 0,
                        "endOffset": 566958,
                        "startOffset": 566850
                    },
                    {
                        "count": 0,
                        "endOffset": 567198,
                        "startOffset": 567074
                    },
                    {
                        "count": 0,
                        "endOffset": 567307,
                        "startOffset": 567235
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';",
                    "      var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';",
                    "",
                    "      if (isOverEvent && !isReplayingEvent(nativeEvent)) {",
                    "        // If this is an over event with a target, we might have already dispatched",
                    "        // the event in the out event of the other target. If this is replayed,",
                    "        // then it's because we couldn't dispatch against this target previously",
                    "        // so we have to do it now instead.",
                    "        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;",
                    "",
                    "        if (related) {",
                    "          // If the related node is managed by React, we can assume that we have",
                    "          // already dispatched the corresponding events during its mouseout.",
                    "          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {",
                    "            return;",
                    "          }",
                    "        }",
                    "      }",
                    "",
                    "      if (!isOutEvent && !isOverEvent) {",
                    "        // Must not be a mouse or pointer in or out - ignoring.",
                    "        return;",
                    "      }",
                    "",
                    "      var win; // TODO: why is this nullable in the types but we read from it?",
                    "",
                    "      if (nativeEventTarget.window === nativeEventTarget) {",
                    "        // `nativeEventTarget` is probably a window object.",
                    "        win = nativeEventTarget;",
                    "      } else {",
                    "        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.",
                    "        var doc = nativeEventTarget.ownerDocument;",
                    "",
                    "        if (doc) {",
                    "          win = doc.defaultView || doc.parentWindow;",
                    "        } else {",
                    "          win = window;",
                    "        }",
                    "      }",
                    "",
                    "      var from;",
                    "      var to;",
                    "",
                    "      if (isOutEvent) {",
                    "        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;",
                    "",
                    "        from = targetInst;",
                    "        to = _related ? getClosestInstanceFromNode(_related) : null;",
                    "",
                    "        if (to !== null) {",
                    "          var nearestMounted = getNearestMountedFiber(to);",
                    "",
                    "          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {",
                    "            to = null;",
                    "          }",
                    "        }",
                    "      } else {",
                    "        // Moving to a node from outside the window.",
                    "        from = null;",
                    "        to = targetInst;",
                    "      }",
                    "",
                    "      if (from === to) {",
                    "        // Nothing pertains to our managed components.",
                    "        return;",
                    "      }",
                    "",
                    "      var SyntheticEventCtor = SyntheticMouseEvent;",
                    "      var leaveEventType = 'onMouseLeave';",
                    "      var enterEventType = 'onMouseEnter';",
                    "      var eventTypePrefix = 'mouse';",
                    "",
                    "      if (domEventName === 'pointerout' || domEventName === 'pointerover') {",
                    "        SyntheticEventCtor = SyntheticPointerEvent;",
                    "        leaveEventType = 'onPointerLeave';",
                    "        enterEventType = 'onPointerEnter';",
                    "        eventTypePrefix = 'pointer';",
                    "      }",
                    "",
                    "      var fromNode = from == null ? win : getNodeFromInstance(from);",
                    "      var toNode = to == null ? win : getNodeFromInstance(to);",
                    "      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);",
                    "      leave.target = fromNode;",
                    "      leave.relatedTarget = toNode;",
                    "      var enter = null; // We should only process this nativeEvent if we are processing",
                    "      // the first ancestor. Next time, we will ignore the event.",
                    "",
                    "      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);",
                    "",
                    "      if (nativeTargetInst === targetInst) {",
                    "        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);",
                    "        enterEvent.target = toNode;",
                    "        enterEvent.relatedTarget = fromNode;",
                    "        enter = enterEvent;",
                    "      }",
                    "",
                    "      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8037,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8135,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 17631,
                "lineBundleEnd": 17729,
                "functionName": "extractEvents$2",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 571937,
                        "startOffset": 568191
                    },
                    {
                        "count": 0,
                        "endOffset": 568555,
                        "startOffset": 568522
                    },
                    {
                        "count": 0,
                        "endOffset": 569245,
                        "startOffset": 568557
                    },
                    {
                        "count": 0,
                        "endOffset": 570815,
                        "startOffset": 569375
                    },
                    {
                        "count": 0,
                        "endOffset": 571042,
                        "startOffset": 570817
                    },
                    {
                        "count": 0,
                        "endOffset": 571070,
                        "startOffset": 571043
                    },
                    {
                        "count": 0,
                        "endOffset": 571107,
                        "startOffset": 571102
                    },
                    {
                        "count": 0,
                        "endOffset": 571133,
                        "startOffset": 571108
                    },
                    {
                        "count": 0,
                        "endOffset": 571936,
                        "startOffset": 571600
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {",
                    "      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;",
                    "",
                    "      switch (domEventName) {",
                    "        // Track the input node that has focus.",
                    "        case 'focusin':",
                    "          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {",
                    "            activeElement$1 = targetNode;",
                    "            activeElementInst$1 = targetInst;",
                    "            lastSelection = null;",
                    "          }",
                    "",
                    "          break;",
                    "",
                    "        case 'focusout':",
                    "          activeElement$1 = null;",
                    "          activeElementInst$1 = null;",
                    "          lastSelection = null;",
                    "          break;",
                    "        // Don't fire the event while the user is dragging. This matches the",
                    "        // semantics of the native select event.",
                    "",
                    "        case 'mousedown':",
                    "          mouseDown = true;",
                    "          break;",
                    "",
                    "        case 'contextmenu':",
                    "        case 'mouseup':",
                    "        case 'dragend':",
                    "          mouseDown = false;",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "          break;",
                    "        // Chrome and IE fire non-standard event when selection is changed (and",
                    "        // sometimes when it hasn't). IE's event fires out of order with respect",
                    "        // to key and input events on deletion, so we discard it.",
                    "        //",
                    "        // Firefox doesn't support selectionchange, so check selection status",
                    "        // after each key entry. The selection changes after keydown and before",
                    "        // keyup, but we check on keydown as well in the case of holding down a",
                    "        // key, when multiple keydown events are fired but only one keyup is.",
                    "        // This is also our approach for IE handling, for the reason above.",
                    "",
                    "        case 'selectionchange':",
                    "          if (skipSelectionChangeEvent) {",
                    "            break;",
                    "          }",
                    "",
                    "        // falls through",
                    "",
                    "        case 'keydown':",
                    "        case 'keyup':",
                    "          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);",
                    "      }",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8696,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 8749,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 18290,
                "lineBundleEnd": 18343,
                "functionName": "extractEvents$3",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 1,
                        "endOffset": 592109,
                        "startOffset": 590104
                    },
                    {
                        "count": 0,
                        "endOffset": 590315,
                        "startOffset": 590307
                    },
                    {
                        "count": 0,
                        "endOffset": 590660,
                        "startOffset": 590404
                    },
                    {
                        "count": 0,
                        "endOffset": 591005,
                        "startOffset": 590943
                    },
                    {
                        "count": 0,
                        "endOffset": 591034,
                        "startOffset": 591015
                    },
                    {
                        "count": 0,
                        "endOffset": 591058,
                        "startOffset": 591043
                    },
                    {
                        "count": 0,
                        "endOffset": 591207,
                        "startOffset": 591067
                    },
                    {
                        "count": 0,
                        "endOffset": 591943,
                        "startOffset": 591847
                    },
                    {
                        "count": 0,
                        "endOffset": 591994,
                        "startOffset": 591979
                    },
                    {
                        "count": 0,
                        "endOffset": 592095,
                        "startOffset": 592003
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            },
            {
                "coverage": [
                    "    function getNodeFromInstance(inst) {",
                    "      if (inst.tag === HostComponent || inst.tag === HostText) {",
                    "        // In Fiber this, is just the state node right now. We assume it will be",
                    "        // a host component or host text.",
                    "        return inst.stateNode;",
                    "      } // Without this first invariant, passing a non-DOM-component triggers the next",
                    "      // invariant for a missing parent, which is super confusing.",
                    "",
                    "",
                    "      throw new Error('getNodeFromInstance: Invalid argument.');",
                    "    }"
                ],
                "startPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11692,
                    "column": 0,
                    "name": null
                },
                "endPosition": {
                    "source": "/Users/abdulaziz/Documents/projects/movies-search/node_modules/react-dom/cjs/react-dom.development.js",
                    "line": 11702,
                    "column": 0,
                    "name": null
                },
                "lineBundleStart": 21286,
                "lineBundleEnd": 21296,
                "functionName": "getNodeFromInstance",
                "isBlockCoverage": true,
                "ranges": [
                    {
                        "count": 2,
                        "endOffset": 704847,
                        "startOffset": 704365
                    },
                    {
                        "count": 0,
                        "endOffset": 704463,
                        "startOffset": 704439
                    },
                    {
                        "count": 0,
                        "endOffset": 704846,
                        "startOffset": 704628
                    }
                ],
                "url": "http://localhost:3000/static/js/0.chunk.js",
                "timestamp": 1659399009608
            }
        ]
    ]
]